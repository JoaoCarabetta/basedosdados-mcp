Directory structure:
└── basedosdados-backend/
    ├── README.md
    ├── docker-compose.yaml
    ├── Dockerfile
    ├── LICENSE
    ├── Makefile
    ├── manage.py
    ├── nginx.conf
    ├── pyproject.toml
    ├── pytest.ini
    ├── start-server.sh
    ├── .dockerignore
    ├── .editorconfig
    ├── .env.docker
    ├── .env.example
    ├── .flake8
    ├── .pre-commit-config.yaml
    ├── .python-version
    ├── backend/
    │   ├── __init__.py
    │   ├── asgi.py
    │   ├── conftest.py
    │   ├── urls.py
    │   ├── wsgi.py
    │   ├── apps/
    │   │   ├── schema.py
    │   │   ├── account/
    │   │   │   ├── __init__.py
    │   │   │   ├── admin.py
    │   │   │   ├── apps.py
    │   │   │   ├── enums.py
    │   │   │   ├── forms.py
    │   │   │   ├── graphql.py
    │   │   │   ├── models.py
    │   │   │   ├── signals.py
    │   │   │   ├── tasks.py
    │   │   │   ├── tests.py
    │   │   │   ├── token.py
    │   │   │   ├── translation.py
    │   │   │   ├── urls.py
    │   │   │   ├── views.py
    │   │   │   ├── migrations/
    │   │   │   │   ├── 0001_initial.py
    │   │   │   │   ├── 0002_initial.py
    │   │   │   │   ├── 0003_account_full_name.py
    │   │   │   │   ├── 0004_account_ckan_id.py
    │   │   │   │   ├── 0005_rename_ckan_id_account_uuid_account_staff_groups_and_more.py
    │   │   │   │   ├── 0006_add_internal_careers_model.py
    │   │   │   │   ├── 0007_alter_career_end_at_alter_career_start_at.py
    │   │   │   │   ├── 0008_alter_account_is_active.py
    │   │   │   │   ├── 0009_alter_career_account.py
    │   │   │   │   ├── 0010_alter_account_is_admin.py
    │   │   │   │   ├── 0011_subscription.py
    │   │   │   │   ├── 0012_subscription_subscription.py
    │   │   │   │   ├── 0013_alter_subscription_admin.py
    │   │   │   │   ├── 0014_alter_subscription_admin.py
    │   │   │   │   ├── 0015_account_is_email_visible.py
    │   │   │   │   ├── 0016_account_deleted_at.py
    │   │   │   │   ├── 0017_account_available_for_research_and_more.py
    │   │   │   │   ├── 0018_account_gcp_email.py
    │   │   │   │   ├── 0019_role_team_alter_career_end_at_alter_career_level_and_more.py
    │   │   │   │   ├── 0020_career_role_new.py
    │   │   │   │   ├── 0021_rename_role_career_role_old_and_more.py
    │   │   │   │   ├── 0022_rename_role_new_career_role_and_more.py
    │   │   │   │   ├── 0023_alter_career_role_old_alter_career_team_old.py
    │   │   │   │   └── __init__.py
    │   │   │   └── templates/
    │   │   │       └── account/
    │   │   │           ├── activation_email.html
    │   │   │           ├── creation_bd_pro.html
    │   │   │           └── password_reset_email.html
    │   │   ├── account_auth/
    │   │   │   ├── __init__.py
    │   │   │   ├── admin.py
    │   │   │   ├── apps.py
    │   │   │   ├── models.py
    │   │   │   ├── tests.py
    │   │   │   ├── urls.py
    │   │   │   ├── views.py
    │   │   │   ├── migrations/
    │   │   │   │   ├── 0001_initial.py
    │   │   │   │   └── __init__.py
    │   │   │   ├── static/
    │   │   │   │   └── js/
    │   │   │   │       └── captcha_submit.js
    │   │   │   └── templates/
    │   │   │       └── signin.html
    │   │   ├── account_payment/
    │   │   │   ├── __init__.py
    │   │   │   ├── admin.py
    │   │   │   ├── apps.py
    │   │   │   ├── graphql.py
    │   │   │   ├── models.py
    │   │   │   ├── signals.py
    │   │   │   ├── tests.gql
    │   │   │   ├── tests.py
    │   │   │   ├── urls.py
    │   │   │   ├── views.py
    │   │   │   ├── webhooks.py
    │   │   │   └── migrations/
    │   │   │       └── __init__.py
    │   │   ├── api/
    │   │   │   ├── __init__.py
    │   │   │   └── v1/
    │   │   │       ├── __init__.py
    │   │   │       ├── admin.py
    │   │   │       ├── apps.py
    │   │   │       ├── filters.py
    │   │   │       ├── graphql.py
    │   │   │       ├── models.py
    │   │   │       ├── schemas.py
    │   │   │       ├── search_engines.py
    │   │   │       ├── search_indexes.py
    │   │   │       ├── search_views.py
    │   │   │       ├── signals.py
    │   │   │       ├── tasks.py
    │   │   │       ├── translation.py
    │   │   │       ├── urls.py
    │   │   │       ├── validators.py
    │   │   │       ├── views.py
    │   │   │       ├── forms/
    │   │   │       │   ├── __init__.py
    │   │   │       │   ├── admin_form.py
    │   │   │       │   ├── reorder_columns_form.py
    │   │   │       │   ├── reorder_observation_levels_form.py
    │   │   │       │   └── reorder_tables_form.py
    │   │   │       ├── management/
    │   │   │       │   ├── __init__.py
    │   │   │       │   └── commands/
    │   │   │       │       ├── __init__.py
    │   │   │       │       ├── reorder_columns.py
    │   │   │       │       └── reorder_tables.py
    │   │   │       ├── migrations/
    │   │   │       │   ├── 0001_initial.py
    │   │   │       │   ├── 0002_column_is_closed_dataset_is_closed_table_is_closed.py
    │   │   │       │   ├── 0003_alter_column_is_closed_alter_dataset_is_closed_and_more.py
    │   │   │       │   ├── 0004_alter_dictionary_options.py
    │   │   │       │   ├── 0005_alter_table_license_alter_table_partner_organization_and_more.py
    │   │   │       │   ├── 0006_alter_dataset_tags_alter_dataset_themes.py
    │   │   │       │   ├── 0007_alter_entitycategory_options_and_more.py
    │   │   │       │   ├── 0008_analysis.py
    │   │   │       │   ├── 0009_remove_analysistype_tag_remove_analysistype_tag_en_and_more.py
    │   │   │       │   ├── 0010_analysis_tags_analysis_themes_analysis_url_and_more.py
    │   │   │       │   ├── 0011_alter_analysis_options_analysis_datasets_and_more.py
    │   │   │       │   ├── 0012_analysis_description_analysis_description_en_and_more.py
    │   │   │       │   ├── 0013_remove_analysis_published_by_analysis_authors_and_more.py
    │   │   │       │   ├── 0014_column_name_staging_column_name_staging_en_and_more.py
    │   │   │       │   ├── 0015_column_status_dataset_status_rawdatasource_status.py
    │   │   │       │   ├── 0016_column_is_primary_key_column_version_dataset_version_and_more.py
    │   │   │       │   ├── 0017_alter_cloudtable_columns.py
    │   │   │       │   ├── 0018_rename_contains_structure_data_rawdatasource_contains_structured_data.py
    │   │   │       │   ├── 0019_column_order.py
    │   │   │       │   ├── 0020_table_order.py
    │   │   │       │   ├── 0021_informationrequest_order_rawdatasource_order.py
    │   │   │       │   ├── 0022_coverage_is_closed_alter_column_is_closed_and_more.py
    │   │   │       │   ├── 0023_datetimerange_is_closed.py
    │   │   │       │   ├── 0024_alter_rawdatasource_license.py
    │   │   │       │   ├── 0025_alter_coverage_area_columnoriginalname_and_more.py
    │   │   │       │   ├── 0026_alter_table_source_bucket_name.py
    │   │   │       │   ├── 0027_dataset_page_views_table_page_views.py
    │   │   │       │   ├── 0028_tableneighbor_and_more.py
    │   │   │       │   ├── 0029_table_one_big_table_query.py
    │   │   │       │   ├── 0030_remove_table_one_big_table_query.py
    │   │   │       │   ├── 0031_table_raw_data_source.py
    │   │   │       │   ├── 0032_dataset_db_slug_table_db_slug.py
    │   │   │       │   ├── 0033_remove_dataset_db_slug_remove_table_db_slug.py
    │   │   │       │   ├── 0034_poll.py
    │   │   │       │   ├── 0035_alter_poll_entity_alter_poll_frequency_and_more.py
    │   │   │       │   ├── 0036_datetimerange_units.py
    │   │   │       │   ├── 0037_area_entity_area_level_area_parent.py
    │   │   │       │   ├── 0038_rename_level_area_administrative_level.py
    │   │   │       │   ├── 0039_dataset_organizations.py
    │   │   │       │   ├── 0040_table_publishers_data_cleaners.py
    │   │   │       │   ├── 0041_remove_table_raw_data_url_and_more.py
    │   │   │       │   ├── 0042_measurementunit.py
    │   │   │       │   ├── 0043_add_measurement_unit_translations.py
    │   │   │       │   ├── 0044_measurementunitcategory_measurementunit_tex_and_more.py
    │   │   │       │   ├── 0045_add_measurement_categories_and_units.py
    │   │   │       │   ├── 0046_observationlevel_order.py
    │   │   │       │   ├── 0047_initialize_observation_level_order.py
    │   │   │       │   ├── 0048_alter_observationlevel_options_and_more.py
    │   │   │       │   ├── 0049_poll_pipeline.py
    │   │   │       │   ├── 0050_table_is_deprecated.py
    │   │   │       │   ├── 0051_add_new_field_dataset.py
    │   │   │       │   ├── 0052_remove_dataset_is_closed.py
    │   │   │       │   ├── 0053_rename_required_requires.py
    │   │   │       │   ├── 0054_alter_organization_area.py
    │   │   │       │   ├── 0055_alter_type_fields_many_tables.py
    │   │   │       │   └── __init__.py
    │   │   │       ├── sql_generator/
    │   │   │       │   ├── __init__.py
    │   │   │       │   └── directory_description.json
    │   │   │       ├── templates/
    │   │   │       │   ├── admin/
    │   │   │       │   │   ├── cloud_table_inline.html
    │   │   │       │   │   ├── observation_level_inline.html
    │   │   │       │   │   ├── reorder_columns.html
    │   │   │       │   │   ├── reorder_observation_levels.html
    │   │   │       │   │   ├── reorder_tables.html
    │   │   │       │   │   ├── edit_inline/
    │   │   │       │   │   │   ├── custom_inline_form.html
    │   │   │       │   │   │   └── stacked.html
    │   │   │       │   │   └── table/
    │   │   │       │   │       └── change_form.html
    │   │   │       │   └── search/
    │   │   │       │       ├── search.html
    │   │   │       │       └── indexes/
    │   │   │       │           └── v1/
    │   │   │       │               └── dataset_text.txt
    │   │   │       └── tests/
    │   │   │           ├── __init__.py
    │   │   │           ├── test_column_coverage.py
    │   │   │           ├── test_models.py
    │   │   │           └── test_table_coverage.py
    │   │   └── core/
    │   │       ├── __init__.py
    │   │       ├── admin.py
    │   │       ├── apps.py
    │   │       ├── models.py
    │   │       ├── signals.py
    │   │       ├── tasks.py
    │   │       ├── tests.py
    │   │       ├── urls.py
    │   │       ├── views.py
    │   │       ├── management/
    │   │       │   ├── __init__.py
    │   │       │   └── commands/
    │   │       │       ├── __init__.py
    │   │       │       ├── dumpfixture.py
    │   │       │       ├── fetch_metabase.py
    │   │       │       ├── loadfixture.py
    │   │       │       └── populate.py
    │   │       ├── migrations/
    │   │       │   ├── 0001_initial.py
    │   │       │   ├── 0002_taskexecution.py
    │   │       │   ├── 0003_alter_taskexecution_execution_time.py
    │   │       │   ├── 0004_alter_taskexecution_status.py
    │   │       │   └── __init__.py
    │   │       ├── static/
    │   │       │   └── core/
    │   │       │       ├── css/
    │   │       │       │   └── main.css
    │   │       │       └── js/
    │   │       │           └── ferramentas.js
    │   │       └── templates/
    │   │           ├── 403.html
    │   │           ├── 500.html
    │   │           ├── base.html
    │   │           └── robots.txt
    │   ├── custom/
    │   │   ├── __init__.py
    │   │   ├── client.py
    │   │   ├── environment.py
    │   │   ├── graphql_auto.py
    │   │   ├── graphql_base.py
    │   │   ├── graphql_jwt.py
    │   │   ├── logger.py
    │   │   ├── middleware.py
    │   │   ├── model.py
    │   │   ├── storage.py
    │   │   ├── task_decorators.py
    │   │   └── utils.py
    │   ├── settings/
    │   │   ├── __init__.py
    │   │   ├── base.py
    │   │   ├── local.py
    │   │   └── remote.py
    │   └── templates/
    │       └── admin/
    │           └── change_form.html
    ├── charts/
    │   ├── .gitkeep
    │   └── basedosdados-api/
    │       ├── Chart.yaml
    │       ├── values.yaml
    │       ├── .helmignore
    │       └── templates/
    │           ├── deployment.yaml
    │           ├── ingress.yaml
    │           └── service.yaml
    ├── scripts/
    │   ├── __init__.py
    │   ├── ai-database-translate.py
    │   ├── database-clean-area-slug.py
    │   ├── lint.py
    │   ├── sync.sh
    │   ├── test.py
    │   ├── utils.py
    │   ├── .gitignore
    │   ├── debug/
    │   │   ├── debug.ipynb
    │   │   └── debug.py
    │   └── migrations/
    │       ├── 20230803_migrate_users.py
    │       ├── 20230807_migrate_careers.py
    │       ├── 20231006_migrate_storage.py
    │       └── __init__.py
    └── .github/
        ├── ISSUE_TEMPLATE/
        │   ├── bug_report.md
        │   └── feature_request.md
        ├── PULL_REQUEST_TEMPLATE/
        │   └── feature.md
        └── workflows/
            ├── ci-dbt.yaml
            ├── ci-docker.yaml
            ├── ci-pr.yaml
            ├── ci-python.yaml
            ├── deploy-dev.yaml
            ├── deploy-prod.yaml
            ├── deploy-staging.yaml
            ├── release-chart.yaml
            ├── release-dev.yaml
            ├── release-prod.yaml
            ├── release-staging.yaml
            └── sync-metadata.yaml


Files Content:

(Files content cropped to 300k characters, download full ingest to see more)
================================================
FILE: README.md
================================================
# Base dos Dados API

## Configuração de ambiente para desenvolvimento

### Requisitos

- Um editor de texto (recomendado VS Code)
- Python 3.11
- `pip`
- (Opcional, mas recomendado) Um ambiente virtual para desenvolvimento (`miniconda`, `virtualenv` ou similares)

### Procedimentos

- Clonar esse repositório

  ```
  git clone https://github.com/basedosdados/backend.git
  ```

- Abrí-lo no seu editor de texto

- No seu ambiente de desenvolvimento, instalar [poetry](https://python-poetry.org/) para gerenciamento de dependências

    ```
    pip3 install poetry
    ```

- Instalar as dependências para desenvolvimento

    ```
    poetry install
    ```

- Instalar os hooks de pré-commit (ver https://pre-commit.com/ para entendimento dos hooks)

    ```
    pre-commit install
    ```

- Pronto! Seu ambiente está configurado para desenvolvimento.

* OBS1: É possível realizar a execução do servidor django um dos alias
```sh
    python manage.py makemigrations
    python manage.py migrate
    make run_docker
```

* OBS2: É possível realizar a execução do servidor django via
```sh
    python manage.py migrate
    python manage.py createsuperuser
    python manage.py runserver 8080
```

* OBS3: É possível realizar a load e dump de fixtures via
```sh
    python manage.py dumpdata > fixture.json
    python manage.py loadfixture fixture.json
```



================================================
FILE: docker-compose.yaml
================================================
---
version: '3'
services:
  index:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    container_name: index
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes: [esdata:/usr/share/elasticsearch/data]
    ports: [9200:9200, 9300:9300]
    healthcheck:
      test: [CMD-SHELL, curl -s http://localhost:9200 >/dev/null || exit 1]
      interval: 1m
      timeout: 20s
      retries: 5
      start_period: 1m
  queue:
    image: redis:6.0
    container_name: queue
    ports: [6379:6379]
    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 10s
      timeout: 5s
      retries: 3
  database:
    image: postgres:14
    container_name: database
    environment: [POSTGRES_USER=postgres, POSTGRES_HOST_AUTH_METHOD=trust]
    env_file: [.env.docker]
    ports: [5432:5432]
    volumes: [pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: [CMD, pg_isready, -U, postgres]
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 1m
    restart: unless-stopped
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api
    env_file: [.env.docker]
    ports: [8080:80]
    depends_on:
      index:
        condition: service_healthy
      queue:
        condition: service_healthy
      database:
        condition: service_healthy
    healthcheck:
      test: [CMD, curl, -f, http://localhost/healthcheck/]
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped
volumes:
  esdata:
  pgdata:



================================================
FILE: Dockerfile
================================================
ARG PYTHON_VERSION=3.11-slim

FROM python:${PYTHON_VERSION}

# Install virtualenv and create a virtual environment
RUN pip install --no-cache-dir -U virtualenv>=20.13.1 && virtualenv /env --python=python3.11
ENV PATH /env/bin:$PATH

# Install pip requirements
WORKDIR /app
COPY . .
RUN /env/bin/pip install --no-cache-dir . && rm nginx.conf

# Install make, nginx and copy configuration
RUN apt-get update \
    && apt-get install -y --no-install-recommends curl make nginx \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm /etc/nginx/sites-enabled/default
RUN apt-get update && apt-get install -y postgresql postgresql-contrib
COPY nginx.conf /etc/nginx/nginx.conf

# Prevents Python from writing .pyc files to disc
# https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE
ENV PYTHONDONTWRITEBYTECODE 1

# Ensures that the python output is sent straight to terminal (e.g. your container log)
# without being first buffered and that you can see the output of your application (e.g. django logs)
# in real time. Equivalent to python -u: https://docs.python.org/3/using/cmdline.html#cmdoption-u
ENV PYTHONUNBUFFERED 1

# Copy app, generate static and set permissions
RUN /env/bin/python manage.py collectstatic --no-input --settings=backend.settings.base && \
    chown -R www-data:www-data /app

# Expose and run app
EXPOSE 80
STOPSIGNAL SIGKILL
CMD ["/app/start-server.sh"]



================================================
FILE: LICENSE
================================================
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.



================================================
FILE: Makefile
================================================
# Get the executables we're using
POETRY=$(shell which poetry)
PYTHON=$(shell poetry run which python)

# `make install`: installs dependencies
.PHONY: install
install:
	$(POETRY) install

# `make install`: installs pre-commit
.PHONY: install_precommit
install_precommit:
	$(POETRY) run pre-commit install --install-hooks

# `make add`: adds a new dependency
ifeq (add,$(firstword $(MAKECMDGOALS)))
	ADD_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
	$(eval $(ADD_ARGS):;@:)
endif

.PHONY: add
add:
	$(POETRY) add $(ADD_ARGS)

# `make remove`: removes a dependency
ifeq (remove,$(firstword $(MAKECMDGOALS)))
	REMOVE_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
	$(eval $(REMOVE_ARGS):;@:)
endif

.PHONY: remove
remove:
	$(POETRY) remove $(REMOVE_ARGS)

# `make lint`: runs linters
.PHONY: lint
lint:
	$(POETRY) run lint

# `make migrations`: checks for model changes and generates migrations
.PHONY: migrations
migrations:
	$(PYTHON) manage.py makemigrations

# `make migrations_docker`: checks for model changes and generates migrations using docker-compose
.PHONY: migrations_docker
migrations_docker:
	docker-compose exec api python manage.py makemigrations

# `make migrate`: applies migrations
.PHONY: migrate
migrate:
	$(PYTHON) manage.py migrate

# `make migrate_docker`: applies migrations using docker-compose
.PHONY: migrate_docker
migrate_docker:
	docker-compose exec api python manage.py migrate

# `make loadfixture`: load fixtures
.PHONY: loadfixture
loadfixture:
	$(PYTHON) manage.py loadfixture fixture.json

# `make loadfixture_docker`: load fixtures using docker-compose
.PHONY: loadfixture_docker
loadfixture_docker:
	docker-compose exec api python manage.py loadfixture /app/fixture.json

# `make superuser`: creates a superuser
.PHONY: superuser
superuser:
	$(PYTHON) manage.py createsuperuser

# `make superuser_docker`: creates a superuser using docker-compose
.PHONY: superuser_docker
superuser_docker:
	docker-compose exec api python manage.py createsuperuser

# `make run_local`: runs the server using manage.py
.PHONY: run_local
run_local:
	@echo "Touching the log file to ensure it exists..."
	@touch backend/django.log
	@echo "Checking for model changes..."
	@make migrations
	@echo "Applying migrations..."
	@make migrate
	@echo "Running the server at http://0.0.0.0:8080/..."
	$(PYTHON) manage.py runserver 0.0.0.0:8080

# `make run_docker`: runs the server using docker-compose
.PHONY: run_docker
run_docker:
	docker-compose up --build --force-recreate --detach

# `make stop_docker`: stops the server using docker-compose
.PHONY: stop_docker
stop_docker:
	docker-compose stop

# `make clean_docker`: removes the server using docker-compose and delete all volumes
.PHONY: clean_docker
clean_docker:
	docker-compose down --volumes

# `make shell_docker`: runs a shell in the server using docker-compose
.PHONY: shell_docker
shell_docker:
	docker-compose exec api bash

# `make logs_docker`: shows the logs of the server using docker-compose
.PHONY: logs_docker
logs_docker:
	docker-compose logs --tail=500 -f

# `make status_docker`: shows the status of the server using docker-compose
.PHONY: status_docker
status_docker:
	docker-compose ps

# `make sync_stripe`: sync stripe models
.PHONY: sync_stripe
sync_stripe:
	python manage.py djstripe_sync_models



================================================
FILE: manage.py
================================================
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()



================================================
FILE: nginx.conf
================================================
user  www-data;
worker_processes  auto;
pid /run/nginx.pid;

error_log  /var/log/nginx/error.log notice;

events {
    worker_connections  1024;
    multi_accept on;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

	map $http_upgrade $connection_upgrade {
		default Upgrade;
		''	close;
	}

	server {
		listen 80;
		server_name _;

		location / {
			proxy_pass http://127.0.0.1:8000;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		}

		location /static {
			root /app/backend;
		}

	}
}



================================================
FILE: pyproject.toml
================================================
[tool.poetry]
name = "backend"
version = "0.0.1"
description = "Base dos Dados API"
authors = ["Gabriel Gazola Milan <gabriel.gazola@poli.ufrj.br>", "Guilherme Peres <contact@gperes.dev>"]
license = "GPL-3.0-only"
homepage = "https://github.com/basedosdados/backend"
repository = "https://github.com/basedosdados/backend"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
Django = "^4.1.3"
psycopg2-binary = "^2.9.5"
django-cors-headers = "^3.13.0"
gunicorn = "^20.1.0"
django-health-check = "^3.17.0"
graphene-django = "3.0.0"
django-filter = "^22.1"
django-graphql-jwt = "^0.3.4"
django-modeltranslation = "^0.18.8"
pillow = "^9.4.0"
graphene-file-upload = "1.3.0"
django-haystack = {extras = ["elasticsearch"], version = "^3.2.1"}
graphene = "3.2.1"
django-storages = {extras = ["google"], version = "^1.13.2"}
google-api-python-client = "^2.83.0"
django-jazzmin = "^2.6.0"
django-extensions = "^3.2.1"
django-ordered-model = "^3.7.4"
google-cloud-bigquery = "^3.11.3"
faker = "^19.6.1"
loguru = "^0.7.2"
huey = "^2.5.0"
redis = "^5.0.1"
pandas = "^2.1.1"
pandas-gbq = "^0.19.2"
google-cloud-storage = "^2.11.0"
stripe = "^4.2.0"
dj-stripe = "^2.8.3"
pydantic = "^2.5.3"
requests = "^2.31.0"
tqdm = "^4.66.4"
django-admin-inline-paginator-plus = "^0.1.4"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
ruff = "^0.2.0"
yamlfix = "^1.16.0"
shandy-sqlfmt = "^0.20.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.2.1"
pytest-cov = "^4.1.0"
pytest-django = "^4.5.2"

[tool.poetry.scripts]
lint = "scripts.lint:main"
test = "scripts.test:main"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"



================================================
FILE: pytest.ini
================================================
[pytest]
DJANGO_SETTINGS_MODULE=backend.settings
python_files = tests.py test_*.py *_tests.py
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning



================================================
FILE: start-server.sh
================================================
#!/usr/bin/env bash
# start-server.sh
(cd /app; python manage.py makemigrations)
(cd /app; python manage.py migrate)
if [ -n "$DJANGO_SUPERUSER_USERNAME" ] && [ -n "$DJANGO_SUPERUSER_PASSWORD" ] ; then
  (cd /app; python manage.py createsuperuser --no-input)
fi
(cd /app; python manage.py run_huey &)
(cd /app; gunicorn backend.wsgi --user www-data --bind 0.0.0.0:8000 --workers 3 --timeout 180) & nginx -g "daemon off;"



================================================
FILE: .dockerignore
================================================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
*.sqlite3
*.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
# poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.example
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
# .idea/
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

# Others
.flake8
.gitignore
.pre-commit-config.yaml
Dockerfile
Makefile
README.md
*sqlite3



================================================
FILE: .editorconfig
================================================
root = true

[*]
indent_style = space
indent_size = 4
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
end_of_line = lf
max_line_length = off



================================================
FILE: .env.docker
================================================
# Mail notifications
ADMINS="Gabriel Milan,gabriel.gazola@poli.ufrj.br"
EMAIL_HOST_USER="notifications@gmail.com"
EMAIL_HOST_PASSWORD="password"
# Django configurations
DJANGO_SECRET_KEY="some-secret"
DJANGO_SETTINGS_MODULE="backend.settings.local"
# Logger
LOGGER_LEVEL="DEBUG"
LOGGER_IGNORE="faker,haystack"
LOGGER_SERIALIZE=""
# Database
DB_HOST="database"
DB_PORT="5432"
DB_NAME="postgres"
DB_USER="postgres"
DB_PASSWORD="postgres"
# Queue
REDIS_HOST="queue"
REDIS_PORT="6379"
# Index
ELASTICSEARCH_URL=http://index:9200



================================================
FILE: .env.example
================================================
# Mail notifications
ADMINS="Gabriel Milan,gabriel.gazola@poli.ufrj.br"
EMAIL_HOST_USER="notifications@gmail.com"
EMAIL_HOST_PASSWORD="password"
# Django configurations
DJANGO_SECRET_KEY="some-secret"
DJANGO_SETTINGS_MODULE="backend.settings.local"
# Logger
LOGGER_LEVEL="DEBUG"
LOGGER_IGNORE="faker,haystack"
LOGGER_SERIALIZE=""
# Database
DB_HOST="localhost"
DB_PORT="5432"
DB_NAME="postgres"
DB_USER="postgres"
DB_PASSWORD="postgres"
# Queue
REDIS_HOST="localhost"
REDIS_PORT="6379"
# Index
ELASTICSEARCH_URL=http://localhost:9200



================================================
FILE: .flake8
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    .venv
max-line-length = 120



================================================
FILE: .pre-commit-config.yaml
================================================
---
default_language_version:
  python: python3.11
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.2.0
    hooks:
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: fix-byte-order-marker
      - id: fix-encoding-pragma
      - id: trailing-whitespace
      - id: no-commit-to-branch
        args: [-b, main]
      - id: detect-private-key
      - id: end-of-file-fixer
  - repo: https://github.com/python-poetry/poetry
    rev: 1.6.0
    hooks:
      - id: poetry-check
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.2.0
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format
  - repo: https://github.com/tconbeer/sqlfmt
    rev: v0.20.0
    hooks:
      - id: sqlfmt
        language_version: python
        additional_dependencies: ['.[jinjafmt]']
  - repo: local
    hooks:
      - id: yamlfix
        name: yamlfix
        types: [yaml]
        language: system
        entry: yamlfix --exclude "charts/**/*" .



================================================
FILE: .python-version
================================================
3.11.6



================================================
FILE: backend/__init__.py
================================================



================================================
FILE: backend/asgi.py
================================================
# -*- coding: utf-8 -*-
"""
ASGI config for backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/
"""

from os import environ

from django.core.asgi import get_asgi_application

environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.settings")

application = get_asgi_application()



================================================
FILE: backend/conftest.py
================================================
# -*- coding: utf-8 -*-
"""
Pytest conftest
"""
import uuid

import pytest

from backend.apps.account.models import Account
from backend.apps.api.v1.models import (
    Analysis,
    AnalysisType,
    Area,
    Availability,
    BigQueryType,
    Column,
    Coverage,
    Dataset,
    DateTimeRange,
    Dictionary,
    Entity,
    EntityCategory,
    InformationRequest,
    Key,
    License,
    ObservationLevel,
    Organization,
    Pipeline,
    QualityCheck,
    RawDataSource,
    Status,
    Table,
    Tag,
    Theme,
)


@pytest.fixture(name="area_br")
@pytest.mark.django_db
def fixture_area_br():
    """Fixture for Area."""
    area_br = Area(
        slug="sa_br",
    )
    area_br.save()
    return area_br


@pytest.fixture(name="organizacao_invalida")
@pytest.mark.django_db
def fixture_organizacao_invalida(area_br):
    """Fixture for Organization without name (invalid)."""
    return Organization.objects.create(
        area=area_br,
        slug="invalida",
    )


@pytest.fixture(name="organizacao_bd")
@pytest.mark.django_db
def fixture_organizacao_bd(area_br):
    """Fixture for Organization."""
    return Organization.objects.create(
        area=area_br,
        slug="basedosdados",
        name="Base dos Dados",
    )


@pytest.fixture(name="organizacao_parceira")
@pytest.mark.django_db
def fixture_organizacao_parceira(area_br):
    """Fixture for Organization."""
    return Organization.objects.create(
        area=area_br,
        slug="organizacao_parceira",
    )


@pytest.fixture(name="tema_educacao")
@pytest.mark.django_db
def fixture_tema_educacao():
    """Fixture for Theme Education."""
    return Theme.objects.create(
        id=uuid.uuid4(),
        slug="educacao",
        name="Educação",
    )


@pytest.fixture(name="tema_saude")
@pytest.mark.django_db
def fixture_tema_saude():
    """Fixture for Theme Health."""
    return Theme.objects.create(
        id=uuid.uuid4(),
        slug="saude",
        name="Saúde",
    )


@pytest.fixture(name="tag_aborto")
@pytest.mark.django_db
def fixture_tag_aborto():
    """Fixture for Tag."""
    return Tag.objects.create(
        id=uuid.uuid4(),
        slug="aborto",
        name="Aborto",
    )


@pytest.fixture(name="tag_covid")
@pytest.mark.django_db
def fixture_tag_covid():
    """Fixture for Tag."""
    return Tag.objects.create(
        id=uuid.uuid4(),
        slug="covid",
        name="Covid-19",
    )


@pytest.fixture(name="licenca_mit")
@pytest.mark.django_db
def fixture_licenca_mit():
    """Fixture for License."""
    return License.objects.create(
        slug="mit",
        name="MIT",
        url="https://mit.com/license",
    )


@pytest.fixture(name="entity_anual")
@pytest.mark.django_db
def fixture_entity_anual():
    """Fixture for Entity."""
    entity_time = EntityCategory.objects.create(
        slug="time",
        name="Time",
    )

    return Entity.objects.create(
        slug="anual",
        name="Anual",
        category=entity_time,
    )


@pytest.fixture(name="entity_escola")
@pytest.mark.django_db
def fixture_entity_escola():
    """Fixture for Entity."""
    entity_education = EntityCategory.objects.create(
        slug="education",
        name="Educação",
    )

    return Entity.objects.create(
        slug="escola",
        name="Escola",
        category=entity_education,
    )


@pytest.fixture(name="pipeline")
@pytest.mark.django_db
def fixture_pipeline():
    """Fixture for Pipeline."""
    return Pipeline.objects.create(
        github_url="https://github.com/basedosdados/pipeline_test",
    )


@pytest.fixture(name="observation_level_anual")
@pytest.mark.django_db
def fixture_observation_level_anual(
    entity_anual,
):
    """Fixture for ObservationLevel."""
    return ObservationLevel.objects.create(
        entity=entity_anual,
    )


@pytest.fixture(name="bigquery_type_string")
@pytest.mark.django_db
def fixture_bigquery_type_string():
    """Fixture for BigQueryType."""
    return BigQueryType.objects.create(name="STRING")


@pytest.fixture(name="bigquery_type_int64")
@pytest.mark.django_db
def fixture_bigquery_type_int64():
    """Fixture for BigQueryType."""
    return BigQueryType.objects.create(name="INT64")


@pytest.fixture(name="disponibilidade_online")
@pytest.mark.django_db
def fixture_disponibilidade_online():
    """Fixture for Availability."""
    return Availability.objects.create(
        name="Online",
        slug="online",
    )


@pytest.fixture(name="status_em_processamento")
@pytest.mark.django_db
def fixture_status_em_processamento():
    """Fixture for Status."""
    return Status.objects.create(
        name="Em processamento",
        slug="em_processamento",
    )


#############################################################################################
# Coverage fixtures for tables
#############################################################################################


@pytest.fixture(name="coverage_tabela_open")
@pytest.mark.django_db
def fixture_coverage_tabela_open(
    tabela_bairros,
    area_br,
):
    """Fixture for open Coverage."""
    coverage_open = Coverage.objects.create(
        table=tabela_bairros,
        area=area_br,
        is_closed=False,
    )
    return coverage_open


@pytest.fixture(name="coverage_tabela_closed")
@pytest.mark.django_db
def fixture_coverage_closed(
    tabela_bairros,
    area_br,
):
    """Fixture for closed Coverage."""
    coverage_closed = Coverage.objects.create(
        table=tabela_bairros,
        area=area_br,
        is_closed=True,
    )
    return coverage_closed


#############################################################################################
# Coverage fixtures for columns
#############################################################################################


@pytest.fixture(name="coverage_coluna_open")
@pytest.mark.django_db
def fixture_coverage_coluna_open(
    coluna_nome_bairros,
    area_br,
):
    """Fixture for open Coverage."""
    coverage_open = Coverage.objects.create(
        column=coluna_nome_bairros,
        area=area_br,
        is_closed=False,
    )
    return coverage_open


@pytest.fixture(name="coverage_coluna_closed")
@pytest.mark.django_db
def fixture_coverage_coluna_closed(
    coluna_nome_bairros,
    area_br,
):
    """Fixture for closed Coverage."""
    coverage_closed = Coverage.objects.create(
        column=coluna_nome_bairros,
        area=area_br,
        is_closed=True,
    )
    return coverage_closed


#############################################################################################
# Date Time Ranges fixtures
# The following two date time ranges overlaps
# The third one is disjoint with the first
#############################################################################################


@pytest.fixture(name="datetime_range_1")
@pytest.mark.django_db
def fixture_datetime_range_1():
    """
    Basic fixture for DateTimeRange.
    Old format: YYYY-MM (1) YYYY-MM
    """
    datetime_range_1 = DateTimeRange(
        start_year=2021,
        start_month=6,
        end_year=2023,
        end_month=6,
        interval=1,
    )
    return datetime_range_1


@pytest.fixture(name="datetime_range_2")
@pytest.mark.django_db
def fixture_datetime_range_2():
    """
    Basic fixture for DateTimeRange.
    Old format: YYYY-MM (1) YYYY-MM
    """
    datetime_range_2 = DateTimeRange(
        start_year=2022,
        start_month=6,
        end_year=2024,
        end_month=6,
        interval=1,
    )
    return datetime_range_2


@pytest.fixture(name="datetime_range_3")
@pytest.mark.django_db
def fixture_datetime_range_3():
    """
    Basic fixture for DateTimeRange.
    Old format: YYYY-MM (1) YYYY-MM
    """
    datetime_range_3 = DateTimeRange(
        start_year=2023,
        start_month=7,
        end_year=2026,
        end_month=6,
        interval=1,
    )
    return datetime_range_3


@pytest.fixture(name="datetime_range_empty")
@pytest.mark.django_db
def fixture_datetime_range_empty():
    """
    Fixture for empty DateTimeRange for columns.
    Must be inherited from table.
    """
    datetime_range_empty = DateTimeRange(
        start_year=None,
        start_month=None,
        end_year=None,
        end_month=None,
        interval=None,
    )
    return datetime_range_empty


#############################################################################################
# Dataset fixtures
#############################################################################################


@pytest.fixture(name="dataset_dados_mestres")
@pytest.mark.django_db
def fixture_dataset_dados_mestres(
    organizacao_bd,
    status_em_processamento,
):
    """Test for Dataset."""
    return Dataset.objects.create(
        organization=organizacao_bd,
        slug="dados_mestres",
        name="Dados Mestres",
        description="Descrição dos dados mestres",
        status=status_em_processamento,
        version=1,
    )


#############################################################################################
# Table fixtures
#############################################################################################


@pytest.fixture(name="tabela_bairros")
@pytest.mark.django_db
def fixture_tabela_bairros(
    dataset_dados_mestres,
    licenca_mit,
    organizacao_parceira,
    pipeline,
):
    """Fixture for Table."""
    return Table.objects.create(
        dataset=dataset_dados_mestres,
        license=licenca_mit,
        partner_organization=organizacao_parceira,
        pipeline=pipeline,
        slug="bairros",
        name="Tabela de bairros do Rio de Janeiro",
        description="Descrição da tabela de bairros do Rio de Janeiro",
        is_directory=False,
        data_cleaning_description="Descrição da limpeza de dados",
        data_cleaning_code_url="http://cleaning.com/bairros",
        auxiliary_files_url="http://aux.com/bairros",
        architecture_url="http://arch.com/bairros",
        source_bucket_name="basedosdados-dev",
        uncompressed_file_size=1000,
        compressed_file_size=20,
        number_rows=100,
        number_columns=10,
        version=1,
        order=0,
    )


@pytest.fixture(name="tabela_pro")
@pytest.mark.django_db
def fixture_tabela_pro(
    dataset_dados_mestres,
    licenca_mit,
    organizacao_parceira,
    pipeline,
):
    """Fixture for Pro Table"""
    return Table.objects.create(
        dataset=dataset_dados_mestres,
        license=licenca_mit,
        partner_organization=organizacao_parceira,
        pipeline=pipeline,
        slug="pro_table",
        name="Tabela Pro With Multiple Coverages",
        description="Descrição da tabela Pro With Multiple Coverages",
        is_directory=False,
        data_cleaning_description="Descrição da limpeza de dados",
        data_cleaning_code_url="http://cleaning.com/pro_table",
        raw_data_url="http://raw.com/pro_table",
        auxiliary_files_url="http://aux.com/pro_table",
        architecture_url="http://arch.com/pro_table",
        source_bucket_name="basedosdados-dev",
        uncompressed_file_size=1000,
        compressed_file_size=20,
        number_rows=100,
        number_columns=10,
        version=1,
        order=0,
    )


@pytest.fixture(name="tabela_diretorios_brasil_uf")
@pytest.mark.django_db
def fixture_tabela_diretorios_brasil_uf(
    dataset_dados_mestres,
    licenca_mit,
    organizacao_parceira,
    pipeline,
):
    """Fixture for Table."""
    return Table.objects.create(
        dataset=dataset_dados_mestres,
        license=licenca_mit,
        partner_organization=organizacao_parceira,
        pipeline=pipeline,
        slug="brasil_uf",
        name="Tabela de estados do Brasil",
        description="Descrição da tabela de estados do Brasil",
        is_directory=True,
        data_cleaning_description="Descrição da limpeza de dados",
        data_cleaning_code_url="http://cleaning.com/brasil_uf",
        raw_data_url="http://raw.com/brasil_uf",
        auxiliary_files_url="http://aux.com/brasil_uf",
        architecture_url="http://arch.com/brasil_uf",
        source_bucket_name="basedosdados-dev",
        uncompressed_file_size=1000,
        compressed_file_size=20,
        number_rows=100,
        number_columns=10,
    )


#############################################################################################
# Column fixtures
#############################################################################################


@pytest.fixture(name="coluna_state_id_diretorio")
@pytest.mark.django_db
def fixture_coluna_state_id_diretorio(
    tabela_diretorios_brasil_uf,
    bigquery_type_string,
):
    """Fixture for state_id column in a directory table."""
    return Column.objects.create(
        table=tabela_diretorios_brasil_uf,
        name="ID do estado no diretório",
        description="Descrição da coluna state_id no diretório",
        bigquery_type=bigquery_type_string,
        is_in_staging=True,
        is_partition=False,
    )


@pytest.fixture(name="coluna_state_id_bairros")
@pytest.mark.django_db
def fixture_coluna_state_id_bairros(
    tabela_bairros, bigquery_type_string, coluna_state_id_diretorio
):
    """Fixture for state_id column. This is a directory."""
    return Column.objects.create(
        table=tabela_bairros,
        name="ID do estado",
        description="Descrição da coluna state_id",
        bigquery_type=bigquery_type_string,
        is_in_staging=True,
        is_partition=False,
        directory_primary_key=coluna_state_id_diretorio,
        order=1,
    )


@pytest.fixture(name="coluna_nome_bairros")
@pytest.mark.django_db
def fixture_coluna_nome_bairros(tabela_bairros, bigquery_type_string, status_em_processamento):
    """Fixture for name column."""
    return Column.objects.create(
        table=tabela_bairros,
        name="Nome do bairro",
        name_staging="Nome do bairro",
        description="Descrição da coluna nome",
        bigquery_type=bigquery_type_string,
        is_in_staging=True,
        is_partition=False,
        status=status_em_processamento,
        is_primary_key=True,
        order=2,
    )


@pytest.fixture(name="coluna_populacao_bairros")
@pytest.mark.django_db
def fixture_coluna_populacao_bairros(
    tabela_bairros,
    bigquery_type_int64,
):
    """Fixture for population column."""
    return Column.objects.create(
        table=tabela_bairros,
        name="População",
        description="Descrição da coluna populacao",
        bigquery_type=bigquery_type_int64,
        is_in_staging=True,
        is_partition=False,
        version=1,
        is_primary_key=False,
        order=3,
    )


#############################################################################################
# RawData fixtures
#############################################################################################


@pytest.fixture(name="raw_data_source")
@pytest.mark.django_db
def fixture_raw_data_source(
    dataset_dados_mestres, disponibilidade_online, licenca_mit, status_em_processamento
):
    """Fixture for RawData."""
    return RawDataSource.objects.create(
        dataset=dataset_dados_mestres,
        availability=disponibilidade_online,
        license=licenca_mit,
        name="Fonte de dados",
        status=status_em_processamento,
        version=1,
        order=0,
    )


#############################################################################################
# Information Request fixtures
#############################################################################################


@pytest.fixture(name="usuario_inicio")
@pytest.mark.django_db
def fixture_usuario_inicio():
    """Fixture for User."""
    return Account.objects.create(
        username="usuario_inicio",
        email="usuario@usuario.com",
        first_name="Usuario",
        last_name="Inicio",
        profile=Account.STAFF,
    )


@pytest.fixture(name="pedido_informacao")
@pytest.mark.django_db
def fixture_pedido_informacao(
    dataset_dados_mestres,
    status_em_processamento,
    usuario_inicio,
):
    """Fixture for InformationRequest."""
    return InformationRequest.objects.create(
        dataset=dataset_dados_mestres,
        status=status_em_processamento,
        started_by=usuario_inicio,
        version=1,
        order=0,
    )


#############################################################################################
# Analysis fixtures
#############################################################################################


@pytest.fixture(name="analise_tipo1")
@pytest.mark.django_db
def fixture_analise_tipo1():
    """Fixture for AnalysisType."""
    return AnalysisType.objects.create(
        name="Análise tipo 1",
        slug="analise-tipo-1",
    )


@pytest.fixture(name="analise_bairros")
@pytest.mark.django_db
def fixture_analise_bairros(
    analise_tipo1,
):
    """Fixture for Analysis."""
    analysis = Analysis.objects.create(
        name="Análise de bairros",
        description="Descrição da análise de bairros",
        analysis_type=analise_tipo1,
        url="https://analise.com/bairros",
    )
    return analysis


@pytest.fixture(name="dicionario_1")
@pytest.mark.django_db
def test_dictionary(
    coluna_nome_bairros,
):
    """Fixture for Dictionary."""
    return Dictionary.objects.create(
        column=coluna_nome_bairros,
    )


@pytest.fixture(name="chave_1")
@pytest.mark.django_db
def fixture_chave_1(dicionario_1):
    """Fixture for Key."""
    chave = Key.objects.create(dictionary=dicionario_1, name="Chave 1", value="Valor 1")

    return chave


@pytest.fixture(name="teste_qualidade")
@pytest.mark.django_db
def fixture_teste_qualidade(
    pipeline,
    analise_bairros,
    dataset_dados_mestres,
    tabela_bairros,
    coluna_nome_bairros,
    chave_1,
    raw_data_source,
    pedido_informacao,
):
    """Fixture for QualityCheck."""
    teste_qualidade = QualityCheck.objects.create(
        name="Teste de qualidade",
        description="Descrição do teste de qualidade",
        passed=True,
        pipeline=pipeline,
        analysis=analise_bairros,
        dataset=dataset_dados_mestres,
        table=tabela_bairros,
        column=coluna_nome_bairros,
        key=chave_1,
        raw_data_source=raw_data_source,
        information_request=pedido_informacao,
    )
    return teste_qualidade



================================================
FILE: backend/urls.py
================================================
# -*- coding: utf-8 -*-
"""backend URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("backend.apps.core.urls")),
    path("", include("backend.apps.api.v1.urls")),
    path("", include("backend.apps.account.urls")),
    path("", include("backend.apps.account_auth.urls")),
    path("", include("backend.apps.account_payment.urls")),
]
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



================================================
FILE: backend/wsgi.py
================================================
# -*- coding: utf-8 -*-
"""
WSGI config for backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
"""

from os import environ

from django.core.wsgi import get_wsgi_application

environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.settings")

application = get_wsgi_application()



================================================
FILE: backend/apps/schema.py
================================================
# -*- coding: utf-8 -*-
from backend.apps.account.graphql import AccountMutation
from backend.apps.account_payment.graphql import Mutation as PaymentMutation
from backend.apps.account_payment.graphql import Query as PaymentQuery
from backend.apps.api.v1.graphql import Query as APIQuery
from backend.custom.graphql_auto import build_schema

schema = build_schema(
    applications=["account", "v1"],
    extra_queries=[
        APIQuery,
        PaymentQuery,
    ],
    extra_mutations=[
        AccountMutation,
        PaymentMutation,
    ],
)



================================================
FILE: backend/apps/account/__init__.py
================================================



================================================
FILE: backend/apps/account/admin.py
================================================
# -*- coding: utf-8 -*-

from django import forms
from django.contrib import admin
from django.contrib.admin import ModelAdmin
from django.contrib.auth.admin import UserAdmin as BaseAccountAdmin
from django.contrib.auth.forms import ReadOnlyPasswordHashField
from django.db.models.query import QuerySet
from django.http import HttpRequest
from django.utils.translation import gettext_lazy
from faker import Faker

from backend.apps.account.models import Account, BDGroup, BDRole, Team, Role, Career, Subscription
from backend.apps.account.tasks import sync_subscription_task


def sync_subscription(modeladmin: ModelAdmin, request: HttpRequest, queryset: QuerySet):
    """Create internal subscriptions from stripe subscriptions"""
    sync_subscription_task()


sync_subscription.short_description = "Sincronizar inscrições"


class AccountCreationForm(forms.ModelForm):
    """A form for creating new users. Includes all the required
    fields, plus a repeated password."""

    password1 = forms.CharField(
        label="Senha",
        widget=forms.PasswordInput(render_value=True),
        required=False,
    )
    password2 = forms.CharField(
        label="Confirme a senha",
        widget=forms.PasswordInput(render_value=True),
        required=False,
    )
    is_active = forms.BooleanField(
        label="Está ativo?",
        initial=True,
        required=False,
        help_text="Marque ativo para não enviar email de confirmação",
    )

    class Meta:
        model = Account
        fields = ("first_name", "last_name", "email", "username", "profile", "is_active")

    def clean_password2(self):
        """Check if the two password entries match"""
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("Passwords don't match")
        return password2

    def save(self, commit=True):
        """Save the provided password in hashed format"""
        user = super().save(commit=False)
        if not self.cleaned_data["password1"]:
            faker = Faker()
            user.set_password(faker.password())
        if self.cleaned_data["password1"]:
            user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user


class AccountChangeForm(forms.ModelForm):
    """A form for updating users. Includes all the fields on
    the user, but replaces the password field with admin's
    password hash display field.
    """

    password = ReadOnlyPasswordHashField(
        label="Password",
        help_text="Senha em formato hash. Não é possível visualizar a senha, mas você "
        "pode alterá-la usando '<a href=\"{}\">este formulário</a>.'",
    )

    class Meta:
        model = Account
        fields = (
            "username",
            "email",
            "password",
            "first_name",
            "last_name",
            "full_name",
            "birth_date",
            "picture",
            "twitter",
            "linkedin",
            "github",
            "website",
            "description",
            "profile",
            "is_active",
            "is_admin",
            "is_superuser",
            "organizations",
        )

    def clean_password(self):
        # Regardless of what the user provides, return the initial value.
        # This is done here, rather than on the field, because the
        # field does not have access to the initial value
        return self.initial["password"]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        password = self.fields.get("password")
        if password:
            password.help_text = password.help_text.format("../password/")
        user_permissions = self.fields.get("user_permissions")
        if user_permissions:
            user_permissions.queryset = user_permissions.queryset.select_related("content_type")


class CareerInline(admin.StackedInline):
    model = Career
    extra = 0
    ordering = ["-start_at"]


class SubscriptionInline(admin.StackedInline):
    model = Subscription
    extra = 0
    ordering = ["-subscription__created"]

    def has_add_permission(self, request, obj=None):
        return False

    def has_change_permission(self, request, obj=None):
        return False

    def has_delete_permission(self, request, obj=None):
        return False


class SuperUserListFilter(admin.SimpleListFilter):
    title = gettext_lazy("Admin²")
    parameter_name = "superuser"

    def lookups(self, request, model_admin):
        return [
            ("true", gettext_lazy("Sim")),
            ("false", gettext_lazy("Não")),
        ]

    def queryset(self, request, queryset):
        if self.value() == "true":
            return queryset.filter(is_superuser=True)
        if self.value() == "false":
            return queryset.filter(is_superuser=False)


class SubscriptionListFilter(admin.SimpleListFilter):
    title = gettext_lazy("Inscrito")
    parameter_name = "subscriber"

    def lookups(self, request, model_admin):
        return [
            ("true", gettext_lazy("Sim")),
            ("false", gettext_lazy("Não")),
        ]

    def queryset(self, request, queryset):
        if self.value() == "true":
            return queryset.filter(internal_subscription__is_active=True)
        if self.value() == "false":
            return queryset.filter(internal_subscription__is_active=False)


class SubscriptionStatusListFilter(admin.SimpleListFilter):
    title = gettext_lazy("Tipo")
    parameter_name = "subscriber"

    def lookups(self, request, model_admin):
        return [
            ("trialing", gettext_lazy("Trial")),
            ("active", gettext_lazy("Active")),
            ("past_due", gettext_lazy("PastDue")),
            ("canceled", gettext_lazy("Canceled")),
            ("incomplete_expired", gettext_lazy("IncompleteExpired")),
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(subscription__status=self.value())


class AccountAdmin(BaseAccountAdmin):
    form = AccountChangeForm
    add_form = AccountCreationForm

    list_display = (
        "email",
        "username",
        "get_full_name",
        "get_organization",
        "created_at",
        "is_admin",
        "is_subscriber",
    )
    list_filter = (
        SuperUserListFilter,
        "is_admin",
        "profile",
        SubscriptionListFilter,
    )
    readonly_fields = ("uuid", "created_at", "updated_at", "deleted_at")
    fieldsets = (
        (
            None,
            {
                "fields": (
                    "uuid",
                    "username",
                    "email",
                    "password",
                    "created_at",
                    "updated_at",
                    "deleted_at",
                )
            },
        ),
        (
            "Personal",
            {
                "fields": (
                    "first_name",
                    "last_name",
                    "full_name",
                    "birth_date",
                    "picture",
                    "twitter",
                    "linkedin",
                    "github",
                    "website",
                    "description",
                    "description_pt",
                    "description_en",
                    "description_es",
                    "profile",
                )
            },
        ),
        (
            "Organizations",
            {
                "fields": (
                    "organizations",
                    "groups",
                )
            },
        ),
        (
            "Permissions",
            {
                "fields": (
                    "is_active",
                    "is_admin",
                    "is_superuser",
                    "staff_groups",
                )
            },
        ),
    )
    # add_fieldsets is not a standard ModelAdmin attribute. UserAdmin
    # overrides get_fieldsets to use this attribute when creating a user.
    add_fieldsets = (
        (
            None,
            {
                "classes": ("wide",),
                "fields": (
                    "first_name",
                    "last_name",
                    "username",
                    "email",
                    "profile",
                    "password1",
                    "password2",
                    "is_active",
                ),
            },
        ),
    )
    search_fields = ("email", "full_name")
    ordering = ["-created_at"]
    inlines = (CareerInline, SubscriptionInline)
    filter_horizontal = ()

    def is_subscriber(self, instance):
        return bool(instance.is_subscriber)

    is_subscriber.boolean = True
    is_subscriber.short_description = "Subscriber"


class TeamAdmin(admin.ModelAdmin):
    list_display = (
        "name",
        "slug",
        "description",
    )
    search_fields = (
        "name",
        "slug",
    )
    readonly_fields = ("created_at", "updated_at")
    ordering = ["name"]


class RoleAdmin(admin.ModelAdmin):
    list_display = (
        "name",
        "slug",
        "description",
    )
    search_fields = (
        "name",
        "slug",
    )
    readonly_fields = ("created_at", "updated_at")
    ordering = ["name"]


class CareerAdmin(admin.ModelAdmin):
    list_display = (
        "account",
        "team_old",
        "team",
        "role_old",
        "role",
        "level",
        "start_at",
        "end_at",
    )
    search_fields = (
        "account__email",
        "team_old",
        "team__name",
        "role_old",
        "role__name",
    )
    readonly_fields = ("created_at", "updated_at")
    ordering = ["account", "start_at"]


class SubscriptionAdmin(admin.ModelAdmin):
    actions = [sync_subscription]
    list_display = (
        "admin_email",
        "stripe_subscription",
        "stripe_subscription_status",
        "stripe_subscription_created_at",
    )
    list_filter = (SubscriptionStatusListFilter,)
    search_fields = ("admin__full_name",)
    readonly_fields = (
        "id",
        "admin",
        "subscription",
    )
    ordering = ["-subscription__created"]

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False

    def has_delete_permission(self, request, obj=None):
        return False


admin.site.register(Account, AccountAdmin)
admin.site.register(Team, TeamAdmin)
admin.site.register(Role, RoleAdmin)
admin.site.register(Career, CareerAdmin)
admin.site.register(Subscription, SubscriptionAdmin)
admin.site.register(BDGroup)
admin.site.register(BDRole)



================================================
FILE: backend/apps/account/apps.py
================================================
# -*- coding: utf-8 -*-
from django.apps import AppConfig


class AccountConfig(AppConfig):
    name = "backend.apps.account"
    verbose_name = "Contas"
    default_auto_field = "django.db.models.BigAutoField"

    def ready(self):
        import backend.apps.account.signals  # noqa



================================================
FILE: backend/apps/account/enums.py
================================================
# -*- coding: utf-8 -*-

from enum import Enum


class WorkArea(str, Enum):
    TECNOLOGIA = "Tecnologia"
    SAUDE = "Saúde"
    FINANCEIRO = "Financeiro"
    EDUCACAO = "Educação"
    VAREJO = "Varejo"
    ENERGIA = "Energia"
    JORNALISMO = "Jornalismo"
    OUTRA = "Outra"

    @classmethod
    def as_choices(cls):
        return [(i.name, i.value) for i in cls]


class WorkRole(str, Enum):
    CEO_DIRETOR = "CEO/Diretor(a)"
    GERENTE = "Gerente"
    COORDENADOR = "Coordenador(a)"
    ANALISTA = "Analista"
    CONSULTOR = "Consultor(a)"
    ESPECIALISTA = "Especialista"
    ASSISTENTE = "Assistente"
    ESTAGIARIO = "Estagiário(a)"
    ESTUDANTE = "Estudante"
    PROFESSOR_PESQUISADOR = "Professor(a)/Pesquisador(a)"
    FREELANCER = "Freelancer"
    EMPREENDEDOR = "Empreendedor(a)"
    OUTRO = "Outro"

    @classmethod
    def as_choices(cls):
        return [(i.name, i.value) for i in cls]


class WorkSize(str, Enum):
    PEQUENA_1_10 = "1-10 funcionários"
    PEQUENA_11_50 = "11-50 funcionários"
    MEDIA_51_200 = "51-200 funcionários"
    MEDIA_201_500 = "201-500 funcionários"
    GRANDE_MAIS_500 = "Mais de 500 funcionários"

    @classmethod
    def as_choices(cls):
        return [(i.name, i.value) for i in cls]


class WorkDataTool(str, Enum):
    SQL = "SQL"
    PYTHON = "Python"
    R = "R"
    STATA = "Stata"
    EXCEL = "Excel"
    NONE = "Nenhuma"
    OTHER = "Outra"

    @classmethod
    def as_choices(cls):
        return [(i.name, i.value) for i in cls]


class WorkGoal(str, Enum):
    MARKET_ANALYSIS = "Análise de mercado"
    COMPETITOR_MONITORING = "Monitoramento de concorrência"
    ACADEMIC_RESEARCH = "Pesquisa acadêmica"
    RISK_MANAGEMENT = "Gestão de riscos"
    PRODUCT_DEVELOPMENT = "Desenvolvimento de produto"
    COMPLIANCE_REGULATORY = "Compliance e regulatório"
    PUBLIC_POLICY_ANALYSIS = "Análise de políticas públicas"
    OTHER = "Outro"

    @classmethod
    def as_choices(cls):
        return [(i.name, i.value) for i in cls]


class DiscoveryMethod(str, Enum):
    SOCIAL_MEDIA = "Redes sociais"
    REFERRAL = "Indicação"
    ONLINE_SEARCH = "Pesquisa online"
    EVENTS = "Eventos"
    ADVERTISING = "Publicidade"
    OTHER = "Outros"

    @classmethod
    def as_choices(cls):
        return [(i.name, i.value) for i in cls]


class AvailableForResearch(str, Enum):
    YES = "Sim"
    NO = "Não"

    @classmethod
    def as_choices(cls):
        return [(i.name, i.value) for i in cls]



================================================
FILE: backend/apps/account/forms.py
================================================
# -*- coding: utf-8 -*-
from django import forms
from django.contrib.auth import get_user_model

from backend.apps.account.admin import AccountCreationForm


class RegisterForm(AccountCreationForm):
    # fields we want to include and customize in our form
    first_name = forms.CharField(
        max_length=100,
        required=True,
        widget=forms.TextInput(
            attrs={
                "placeholder": "First Name",
                "class": "form-control",
            }
        ),
    )
    last_name = forms.CharField(
        max_length=100,
        required=True,
        widget=forms.TextInput(
            attrs={
                "placeholder": "Last Name",
                "class": "form-control",
            }
        ),
    )
    username = forms.CharField(
        max_length=100,
        required=True,
        widget=forms.TextInput(
            attrs={
                "placeholder": "Username",
                "class": "form-control",
            }
        ),
    )
    email = forms.EmailField(
        required=True,
        widget=forms.TextInput(
            attrs={
                "placeholder": "Email",
                "class": "form-control",
            }
        ),
    )
    password1 = forms.CharField(
        max_length=50,
        required=True,
        widget=forms.PasswordInput(
            attrs={
                "placeholder": "Password",
                "class": "form-control",
                "data-toggle": "password",
                "id": "password",
            }
        ),
    )
    password2 = forms.CharField(
        max_length=50,
        required=True,
        widget=forms.PasswordInput(
            attrs={
                "placeholder": "Confirm Password",
                "class": "form-control",
                "data-toggle": "password",
                "id": "password",
            }
        ),
    )

    class Meta:
        model = get_user_model()
        fields = ["first_name", "last_name", "username", "email", "password1", "password2"]



================================================
FILE: backend/apps/account/graphql.py
================================================
# -*- coding: utf-8 -*-
from graphene import ID, Boolean, Mutation

from backend.apps.account.models import Account


class DeleteAccountPictureMutation(Mutation):
    """Delete picture of account"""

    ok = Boolean()

    class Arguments:
        id = ID(required=True, description="Account ID")

    def mutate(self, info, id):
        try:
            obj = Account.objects.get(pk=id)
            obj.picture = None
            obj.save()

            return DeleteAccountPictureMutation(ok=True)
        except Account.DoesNotExist:
            return DeleteAccountPictureMutation(ok=False)


class AccountMutation:
    _delete_account_picture_mutation = DeleteAccountPictureMutation.Field()



================================================
FILE: backend/apps/account/models.py
================================================
# -*- coding: utf-8 -*-
from typing import Tuple
from uuid import uuid4

from django.contrib.auth.hashers import check_password, make_password
from django.contrib.auth.models import (
    AbstractBaseUser,
    BaseUserManager,
    Group,
    Permission,
    PermissionsMixin,
)
from django.db import models
from django.db.models.query import QuerySet
from django.utils import timezone

from backend.apps.account.enums import (
    AvailableForResearch,
    DiscoveryMethod,
    WorkArea,
    WorkDataTool,
    WorkGoal,
    WorkRole,
    WorkSize,
)
from backend.custom.graphql_jwt import owner_required, subscription_member
from backend.custom.model import BaseModel
from backend.custom.storage import OverwriteStorage, upload_to, validate_image


class RegistrationToken(BaseModel):
    token = models.CharField(max_length=255, unique=True, default=uuid4)
    created_at = models.DateTimeField(auto_now_add=True)
    used_at = models.DateTimeField(auto_now=True)
    active = models.BooleanField(default=True)

    def __str__(self):
        return self.token

    graphql_visible = False

    class Meta:
        verbose_name = "Registration Token"
        verbose_name_plural = "Registration Tokens"


class BDRoleManager(models.Manager):
    """
    The manager for the BD Role model.
    """

    use_in_migrations = True

    def get_by_natural_key(self, name):
        return self.get(name=name)


class BDRole(BaseModel):
    """
    Roles is a way to group permissions. Based on roles from IAM,
    a role is a collection of permissions that can be assigned to a group.
    A role can be assigned to multiple groups and a group can have multiple roles.
    It does not have a user field because it is not meant to be assigned to a user,
    and does not hold credentials, as these belong to the user.
    The relationship between roles and groups is defined in the BDGroupRole model,
    which also holds the organization to which the role is related.
    """

    name = models.CharField(max_length=255, unique=True)
    description = models.TextField(null=True, blank=True)
    permissions = models.ManyToManyField(
        Permission,
        related_name="roles",
        verbose_name="Permissions",
        related_query_name="role",
        blank=True,
    )

    graphql_nested_filter_fields_whitelist = ["name"]

    objects = BDRoleManager()

    class Meta:
        verbose_name = "BD role"
        verbose_name_plural = "BD roles"

    def __str__(self):
        return self.name


class BDGroupManager(models.Manager):
    """
    The manager for the BD Group model.
    """

    use_in_migrations = True

    def get_by_natural_key(self, name):
        return self.get(name=name)


class BDGroup(BaseModel):
    """
    Based on Group model from django.contrib.auth.models
    To avoid clashes with django.contrib.auth.models.Group
    we use BDGroup instead of Group. Users can be assigned
    to multiple groups and groups can have multiple roles,
    each one with a set of permissions. They must also be
    related to an organization, as an user can be part of
    multiple organizations with different roles and
    permissions. We use the through model BDGroupRole to
    link groups to roles.

    """

    name = models.CharField(max_length=255, unique=True)
    description = models.TextField(null=True, blank=True)
    roles = models.ManyToManyField(
        BDRole,
        through="BDGroupRole",
        related_name="groups",
        verbose_name="Roles",
        related_query_name="group",
        blank=True,
    )

    objects = BDGroupManager()

    graphql_nested_filter_fields_whitelist = ["name"]

    class Meta:
        verbose_name = "BD group"
        verbose_name_plural = "BD groups"

    def __str__(self):
        return self.name

    def natural_key(self):
        return (self.name,)


class BDGroupRole(BaseModel):
    """
    The model that links groups to roles.
    """

    group = models.ForeignKey(BDGroup, on_delete=models.CASCADE)
    role = models.ForeignKey(BDRole, on_delete=models.CASCADE)
    organization = models.ForeignKey(
        "v1.Organization",
        on_delete=models.PROTECT,
        related_name="group_roles",
        related_query_name="group_role",
    )

    class Meta:
        verbose_name = "BD group role"
        verbose_name_plural = "BD group roles"
        constraints = [
            models.UniqueConstraint(
                fields=["group", "role", "organization"],
                name="unique_group_role_organization",
            )
        ]

    def __str__(self):
        return f"{self.group.name} - {self.role.name}"


class AccountManager(BaseUserManager):
    def get_queryset(self) -> QuerySet:
        return super().get_queryset().filter(deleted_at__isnull=True)

    def create_user(self, email, password=None, profile=2, **kwargs):
        if not email:
            raise ValueError("Users must have a valid email address.")
        if not kwargs.get("username"):
            raise ValueError("Users must have a valid username.")
        account = self.model(
            email=self.normalize_email(email),
            username=kwargs.get("username"),
            first_name=kwargs.get("first_name"),
            last_name=kwargs.get("last_name"),
            profile=profile,
            is_superuser=False,
        )
        account.set_password(password)
        account.save()
        return account

    def create_superuser(self, email, password, **kwargs):
        account = self.create_user(email, password, profile=1, **kwargs)
        account.is_admin = True
        account.is_superuser = True
        account.is_active = True
        account.save()
        return account


class Account(BaseModel, AbstractBaseUser, PermissionsMixin):
    STAFF = 1
    VISITANTE = 2
    COLABORADOR = 3

    PROFILE_CHOICES = (
        (STAFF, "Staff"),
        (VISITANTE, "Visitante"),
        (COLABORADOR, "Colaborador"),
    )

    uuid = models.UUIDField(primary_key=False, default=uuid4)

    email = models.EmailField("Email", unique=True)
    gcp_email = models.EmailField("GCP email", null=True, blank=True)  # Google Cloud Platform email
    username = models.CharField("Username", max_length=40, blank=True, null=True, unique=True)

    first_name = models.CharField("Nome", max_length=40, blank=True)
    last_name = models.CharField("Sobrenome", max_length=40, blank=True)
    full_name = models.CharField("Nome Completo", max_length=100, blank=True, null=True)
    birth_date = models.DateField("Data de Nascimento", null=True, blank=True)
    picture = models.ImageField(
        "Imagem",
        null=True,
        blank=True,
        storage=OverwriteStorage(),
        upload_to=upload_to,
        validators=[validate_image],
    )
    twitter = models.CharField("Twitter", max_length=255, null=True, blank=True)
    linkedin = models.CharField("Linkedin", max_length=255, null=True, blank=True)
    github = models.CharField("Github", max_length=255, null=True, blank=True)
    website = models.URLField("Website", null=True, blank=True)
    description = models.TextField("Descrição", null=True, blank=True)

    organizations = models.ManyToManyField(
        "v1.Organization",
        related_name="users",
        verbose_name="Organizações",
        related_query_name="user",
        blank=True,
    )

    is_admin = models.BooleanField(
        "Admin",
        default=False,
        help_text="Indica se tem acesso à administração",
    )
    is_active = models.BooleanField(
        "Ativo", default=False, help_text="Indica se o usuário está ativo"
    )
    is_email_visible = models.BooleanField(
        "Email é visível", default=False, help_text="Indica se o email do usuário é público"
    )

    profile = models.IntegerField(
        choices=PROFILE_CHOICES,
        default=VISITANTE,
        verbose_name="Perfil",
    )

    groups = models.ManyToManyField(
        BDGroup,
        related_name="users",
        verbose_name="Grupos Externos",
        related_query_name="user",
        blank=True,
        help_text="Grupos de acesso ao app externo da BD",
    )

    staff_groups = models.ManyToManyField(
        Group,
        related_name="users",
        verbose_name="Grupos Internos",
        related_query_name="user",
        blank=True,
        help_text="Grupos de acesso ao admin",
    )

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    deleted_at = models.DateTimeField(null=True, blank=True)

    # UX Research <
    work_area = models.TextField(
        null=True,
        blank=True,
        choices=WorkArea.as_choices(),
        verbose_name="Área",
    )
    work_role = models.TextField(
        null=True,
        blank=True,
        choices=WorkRole.as_choices(),
        verbose_name="Cargo",
    )
    work_size = models.TextField(
        null=True,
        blank=True,
        choices=WorkSize.as_choices(),
        verbose_name="Tamanho da empresa",
    )
    work_goal = models.TextField(
        null=True,
        blank=True,
        choices=WorkGoal.as_choices(),
        verbose_name="Objetivo com a ONG",
    )
    work_data_tool = models.TextField(
        null=True,
        blank=True,
        choices=WorkDataTool.as_choices(),
        verbose_name="Ferramenta principal de análise de dados",
    )
    discovery_method = models.TextField(
        null=True,
        blank=True,
        choices=DiscoveryMethod.as_choices(),
        verbose_name="Como conheceu a ONG",
    )
    available_for_research = models.TextField(
        null=True,
        blank=True,
        choices=AvailableForResearch.as_choices(),
        verbose_name="Se gostaria de participar de pesquisas",
    )
    # UX Research >

    objects = AccountManager()

    graphql_fields_blacklist = [
        "is_admin",
        "is_superuser",
        "staff_groups",
        *BaseModel.graphql_fields_blacklist,
    ]
    graphql_filter_fields_blacklist = ["internal_subscription"]
    graphql_nested_filter_fields_whitelist = ["email", "username"]
    graphql_query_decorator = owner_required(allow_anonymous=False)
    graphql_mutation_decorator = owner_required(allow_anonymous=True)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["username", "first_name", "last_name"]

    class Meta:
        db_table = "account"
        verbose_name = "account"
        verbose_name_plural = "accounts"
        ordering = ["first_name", "last_name"]

    @property
    def is_staff(self):
        return self.is_admin

    @property
    def is_subscriber(self) -> bool:
        return bool(self.pro_subscription)

    @property
    def customer(self):
        return self.djstripe_customers.first()

    @property
    def pro_owner_subscription(self):
        sub = self.internal_subscription.filter(is_active=True).all() or []
        sub = [s for s in sub if s.is_pro]
        return sub[0] if sub else None

    @property
    def pro_member_subscription(self):
        sub = self.subscription_set.filter(is_active=True).all() or []
        sub = [s for s in sub if s.is_pro]
        return sub[0] if sub else None

    @property
    def pro_subscription(self) -> str:
        """BD Pro subscription role, one of bd_pro or bd_pro_empresas"""
        if self.pro_owner_subscription:
            return self.pro_owner_subscription.stripe_subscription
        if self.pro_member_subscription:
            return self.pro_member_subscription.stripe_subscription

    @property
    def pro_subscription_role(self) -> str:
        """BD Pro subscription role, one of owner or member"""
        if self.pro_owner_subscription:
            return "owner"
        if self.pro_member_subscription:
            return "member"

    @property
    def pro_subscription_slots(self) -> str:
        """BD Pro subscription slots"""
        if self.pro_owner_subscription:
            return self.pro_owner_subscription.stripe_subscription_slots
        if self.pro_member_subscription:
            return self.pro_member_subscription.stripe_subscription_slots

    @property
    def pro_subscription_status(self) -> str:
        def convert_status(status: str) -> str:
            if status == "trialing":
                return "active"
            return status

        """BD Pro subscription status"""
        if self.pro_owner_subscription:
            return convert_status(self.pro_owner_subscription.stripe_subscription_status)
        if self.pro_member_subscription:
            return convert_status(self.pro_member_subscription.stripe_subscription_status)

    def __str__(self):
        return self.email

    def get_short_name(self):
        return self.first_name

    get_short_name.short_description = "nome"

    def get_full_name(self):
        if self.first_name and self.last_name:
            return f"{self.first_name} {self.last_name}"
        if self.first_name:
            return self.first_name
        return self.username

    get_full_name.short_description = "nome completo"

    def get_organization(self):
        return ", ".join(self.organizations.all().values_list("name", flat=True))

    get_organization.short_description = "organização"

    def save(self, *args, **kwargs) -> None:
        # If self._password is set and check_password(self._password, self.password) is True, then
        # just save the model without changing the password.
        if self._password and check_password(self._password, self.password):
            super().save(*args, **kwargs)
            return
        # If self._password is not set, we're probably not trying to modify the password, so if
        # self.password is valid, just save the model without changing the password.
        elif is_valid_encoded_password(self.password):
            super().save(*args, **kwargs)
            return
        # If self.password is not usable, then we're probably trying to set self.password as the
        # new password, so set it and save the model.
        self.set_password(self.password)
        super().save(*args, **kwargs)

    def delete(self):
        self.deleted_at = timezone.now()
        self.save()


class Team(BaseModel):
    slug = models.SlugField(unique=True)
    name = models.CharField("Name", max_length=100, unique=True)
    description = models.TextField("Description", null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Team"
        verbose_name_plural = "Teams"
        ordering = ["name"]

    def __str__(self):
        return self.name


class Role(BaseModel):
    slug = models.SlugField(unique=True)
    name = models.CharField("Name", max_length=100, unique=True)
    description = models.TextField("Description", null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Role"
        verbose_name_plural = "Roles"
        ordering = ["name"]

    def __str__(self):
        return self.name


class Career(BaseModel):
    id = models.UUIDField(primary_key=True, default=uuid4)
    account = models.ForeignKey(Account, on_delete=models.DO_NOTHING, related_name="careers")
    team_old = models.CharField("Team (old)", max_length=40, blank=True)
    team = models.ForeignKey(
        Team, on_delete=models.DO_NOTHING, related_name="careers", null=True, blank=True
    )
    role_old = models.CharField("Role (old)", max_length=40, blank=True)
    role = models.ForeignKey(
        Role, on_delete=models.DO_NOTHING, related_name="careers", null=True, blank=True
    )
    level = models.CharField("Level", max_length=40, blank=True)
    start_at = models.DateField("Start at", null=True, blank=True)
    end_at = models.DateField("End at", null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Career"
        verbose_name_plural = "Careers"

    def __str__(self):
        return f"{self.account.email} @{self.role.name}" if self.role else ""

    def get_team(self):
        return self.team.name if self.team else ""

    get_team.short_description = "Team"


class Subscription(BaseModel):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    id = models.UUIDField(primary_key=True, default=uuid4)

    is_active = models.BooleanField(
        "Ativo",
        default=False,
        help_text="Indica se a inscrição está ativa",
    )

    admin = models.ForeignKey(
        "Account",
        on_delete=models.DO_NOTHING,
        related_name="internal_subscription",
    )
    subscription = models.OneToOneField(
        "djstripe.Subscription",
        null=True,
        blank=True,
        on_delete=models.DO_NOTHING,
        related_name="internal_subscription",
    )
    subscribers = models.ManyToManyField(Account)

    class Meta:
        verbose_name = "Subscription"
        verbose_name_plural = "Subscriptions"

    def __str__(self):
        return f"{self.admin.email} @ {self.subscription.plan}"

    graphql_query_decorator = subscription_member(only_admin=False)
    graphql_mutation_decorator = subscription_member(only_admin=True)

    @property
    def admin_email(self):
        return self.admin.email or "test@stripe.com"

    @property
    def subscribers_info(self) -> list[dict]:
        info = [
            {
                "email": self.admin.email,
                "role": "admin",
            }
        ]
        for subscriber in self.subscribers.all():
            info.append(
                {
                    "email": subscriber.email,
                    "role": "subscriber",
                }
            )
        return info

    @property
    def stripe_subscription(self):
        return self.subscription.plan.product.metadata.get("code", "")

    @property
    def stripe_subscription_slots(self):
        return self.subscription.plan.product.metadata.get("slots", "0")

    @property
    def stripe_subscription_status(self):
        return self.subscription.status.lower().replace(" ", "_")

    @property
    def stripe_subscription_created_at(self):
        return self.subscription.created

    @property
    def is_pro(self):
        return "bd_pro" in self.subscription.plan.product.metadata.get("code", "")

    @property
    def canceled_at(self):
        if self.subscription:
            return self.subscription.cancel_at.isoformat()
        return None

    @property
    def plan_interval(self):
        if self.subscription:
            return self.subscription.plan.interval
        return None

    @property
    def next_billing_cycle(self):
        if self.subscription:
            return self.subscription.current_period_end.isoformat()
        return None


def split_password(password: str) -> Tuple[str, str, str, str]:
    """Split a password into four parts: algorithm, iterations, salt, and hash"""
    algorithm, iterations, salt, hash = password.split("$", 3)
    return algorithm, iterations, salt, hash


def is_valid_encoded_password(password: str) -> bool:
    """Check if a password is valid"""
    double_encoded = make_password(password)
    try:
        target_algorithm, target_iterations, _, _ = split_password(double_encoded)
        algorithm, iterations, _, _ = split_password(password)
    except ValueError:
        return False
    return algorithm == target_algorithm and iterations == target_iterations



================================================
FILE: backend/apps/account/signals.py
================================================
# -*- coding: utf-8 -*-
from datetime import datetime

from django.conf import settings
from django.core.mail import EmailMultiAlternatives
from django.db.models import Q
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.template.loader import render_to_string
from django.utils.encoding import force_bytes
from django.utils.http import urlsafe_base64_encode
from djstripe.models import Customer as DJStripeCustomer

from backend.apps.account.models import Account, Subscription
from backend.apps.account.token import token_generator
from backend.apps.account_payment.webhooks import add_user
from backend.custom.environment import get_frontend_url, is_prd


def send_activation_email(account: Account):
    """Send activation email to account"""
    to_email = account.email
    from_email = settings.EMAIL_HOST_USER
    subject = "Bem Vindo à Base dos Dados!"

    token = token_generator.make_token(account)
    uid = urlsafe_base64_encode(force_bytes(account.pk))

    content = render_to_string(
        "account/activation_email.html",
        {
            "name": account.get_full_name(),
            "domain": get_frontend_url(),
            "uid": uid,
            "token": token,
        },
    )

    msg = EmailMultiAlternatives(subject, "", from_email, [to_email])
    msg.attach_alternative(content, "text/html")
    msg.send()


def create_subscription(user: Account):
    """
    Create an internal subscription if the email has a Stripe subscription.
    """
    customer = DJStripeCustomer.objects.filter(email=user.email).first()
    stripe_subscription = None

    if customer:
        stripe_subscription = customer.subscriptions.filter(
            Q(status="active") | Q(status="trialing")
        ).first()

    if stripe_subscription:
        Subscription.objects.create(
            admin=user,
            subscription=stripe_subscription,
        )

        customer.subscriber = user
        customer.save()
        # Add user to Google Group
        add_user(user.gcp_email or user.email)


@receiver(post_save, sender=Account)
def send_activation_email_signal(sender, instance, created, raw, **kwargs):
    """Send activation email to instance after registration

    It only sends the email if:
    - The account is new
    - The account isn't active
    - The account isn't a fixture
    - The environment is production
    """
    if created and not raw and not instance.is_active and is_prd():
        send_activation_email(instance)

    # Check if the account has an active subscription in Stripe
    # If it does, create an internal subscription
    if created:
        create_subscription(instance)


def send_welcome_email(account: Account):
    """Send welcome email to account"""
    to_email = account.email
    from_email = settings.EMAIL_HOST_USER
    subject = "Bem Vindo à Base dos Dados!"

    token = token_generator.make_token(account)
    uid = urlsafe_base64_encode(force_bytes(account.pk))

    content = render_to_string(
        "account/welcome_email.html",
        {
            "name": account.get_full_name(),
            "domain": get_frontend_url(),
            "uid": uid,
            "token": token,
        },
    )

    msg = EmailMultiAlternatives(subject, "", from_email, [to_email])
    msg.attach_alternative(content, "text/html")
    msg.send()


def send_welcome_email_to_previous_subscribers():
    """Send welcome email to all previous subscribers"""

    for subscription in Subscription.objects.filter(
        subscription__status="active",
        subscription__created__lte=datetime(2023, 12, 1),
    ).all():
        send_welcome_email(subscription.admin)



================================================
FILE: backend/apps/account/tasks.py
================================================
# -*- coding: utf-8 -*-
from djstripe.models import Subscription as DJStripeSubscription
from huey.contrib.djhuey import db_task
from loguru import logger

from backend.apps.account.models import Account, Subscription


@db_task()
def sync_subscription_task():
    """Create internal subscriptions from stripe subscriptions

    1. Subscription already exists
    2. Admin already exists
    3. Email already exists
    """

    def parse_name(subscription):
        name = subscription.customer.name.title().split(" ", 1)
        if len(name) == 1:
            return name, ""
        if len(name) == 2:
            return name

    for subscription in DJStripeSubscription.objects.order_by("-created").all():
        admin = None
        is_active = subscription.status == "active"
        if getattr(subscription, "internal_subscription", None):
            continue
        if getattr(subscription.customer, "subscriber", None):
            admin = subscription.customer.subscriber
        if getattr(subscription.customer, "email", None):
            try:
                first_name, last_name = parse_name(subscription)
                admin = admin or Account.objects.filter(
                    email=subscription.customer.email,
                ).first()  # fmt: skip
                admin = admin or Account.objects.create(
                    is_active=True,
                    last_name=last_name,
                    first_name=first_name,
                    email=subscription.customer.email,
                    username=subscription.customer.email.split("@")[0],
                )
                subscription.customer.subscriber = admin
                subscription.customer.save()
            except Exception as error:
                logger.error(error)
        if admin and subscription:
            Subscription.objects.create(
                admin=admin,
                is_active=is_active,
                subscription=subscription,
            )
            logger.info(f"Create subscription for {admin}")



================================================
FILE: backend/apps/account/tests.py
================================================
# -*- coding: utf-8 -*-
from unittest.mock import MagicMock, patch

import pytest
from django.test.client import Client
from django.urls import reverse
from django.utils.encoding import force_bytes
from django.utils.http import urlsafe_base64_encode

from backend.apps.account.models import Account


@pytest.mark.django_db
def test_account_create():
    account = Account.objects.create(
        username="john.doe",
        email="john.doe@email.com",
    )
    assert account.is_active is False


@pytest.mark.django_db
@patch("backend.apps.account.signals.EmailMultiAlternatives")
def test_activate_account_signal(mock: MagicMock):
    Account.objects.create(
        username="john.doe",
        email="john.doe@email.com",
    )
    assert mock.call_args[0][0] == "Bem Vindo à Base dos Dados!"
    assert mock.call_args[0][3] == ["john.doe@email.com"]
    assert "activate-account" in mock.mock_calls[1][1][0]


@pytest.mark.django_db
@patch("backend.apps.account.signals.render_to_string")
def test_activate_account_confirmation(mock: MagicMock, client: Client):
    account = Account.objects.create(
        username="john.doe",
        email="john.doe@email.com",
    )
    uid = mock.call_args[0][1]["uid"]
    token = mock.call_args[0][1]["token"]
    #
    url = reverse("activate", args=[uid, token])
    response = client.post(url)
    assert response.status_code == 200
    assert response.json() == {}
    #
    account.refresh_from_db()
    assert account.is_active


@pytest.mark.django_db
@patch("backend.apps.account.views.EmailMultiAlternatives")
def test_password_reset_request(mock: MagicMock, client: Client):
    account = Account.objects.create(
        username="john.doe",
        email="john.doe@email.com",
    )
    uid = urlsafe_base64_encode(force_bytes(account.pk))
    #
    url = reverse("password_reset", args=[uid])
    response = client.post(url)
    assert response.status_code == 200
    assert response.json() == {}
    #
    assert mock.call_args[0][0] == "Base dos Dados: Redefinição de Senha"
    assert mock.call_args[0][3] == ["john.doe@email.com"]
    assert "password-recover" in mock.mock_calls[1][1][0]


@pytest.mark.django_db
@patch("backend.apps.account.views.render_to_string")
@patch("backend.apps.account.signals.render_to_string")
def test_password_reset_confirmation(mock_signal: MagicMock, mock_view: MagicMock, client: Client):
    # Create account
    account = Account.objects.create(
        username="john.doe",
        email="john.doe@email.com",
    )
    password0 = account.password
    uid = mock_signal.call_args[0][1]["uid"]
    token = mock_signal.call_args[0][1]["token"]
    # Request password reset
    url = reverse("password_reset", args=[uid])
    response = client.post(url)
    uid = mock_view.call_args[0][1]["uid"]
    token = mock_view.call_args[0][1]["token"]
    # Execute password reset
    url = reverse("password_reset_confirm", args=[uid, token])
    response = client.post(url, data={"password": "12345678"}, content_type="application/json")
    assert response.status_code == 200
    assert response.json() == {}
    # Verify password reset
    account.refresh_from_db()
    password1 = account.password
    assert password0 != password1



================================================
FILE: backend/apps/account/token.py
================================================
# -*- coding: utf-8 -*-
from django.contrib.auth.tokens import PasswordResetTokenGenerator

token_generator = PasswordResetTokenGenerator()



================================================
FILE: backend/apps/account/translation.py
================================================
# -*- coding: utf-8 -*-
from modeltranslation.translator import TranslationOptions, translator

from .models import Account, Team, Role


class TeamTranslationOptions(TranslationOptions):
    fields = ("name", "description")


class RoleTranslationOptions(TranslationOptions):
    fields = ("name", "description")


class AccountTranslationOptions(TranslationOptions):
    fields = ("description",)


translator.register(Account, AccountTranslationOptions)
translator.register(Team, TeamTranslationOptions)
translator.register(Role, RoleTranslationOptions)



================================================
FILE: backend/apps/account/urls.py
================================================
# -*- coding: utf-8 -*-
from django.urls import path

from backend.apps.account.views import (
    AccountActivateConfirmView,
    AccountActivateView,
    PasswordResetConfirmView,
    PasswordResetView,
)

urlpatterns = [
    path(
        "account/account_activate/<uidb64>/",
        AccountActivateView.as_view(),
        name="activate",
    ),
    path(
        "account/account_activate_confirm/<uidb64>/<token>/",
        AccountActivateConfirmView.as_view(),
        name="activate",
    ),
    path(
        "account/password_reset/<uidb64>/",
        PasswordResetView.as_view(),
        name="password_reset",
    ),
    path(
        "account/password_reset_confirm/<uidb64>/<token>/",
        PasswordResetConfirmView.as_view(),
        name="password_reset_confirm",
    ),
]



================================================
FILE: backend/apps/account/views.py
================================================
# -*- coding: utf-8 -*-
from json import loads
from typing import Any

from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.auth.views import PasswordResetConfirmView, PasswordResetView
from django.contrib.messages.views import SuccessMessageMixin
from django.core.mail import EmailMultiAlternatives
from django.http import JsonResponse
from django.template.loader import render_to_string
from django.urls import reverse_lazy as r
from django.utils.decorators import method_decorator
from django.utils.encoding import force_bytes, force_str
from django.utils.http import urlsafe_base64_decode, urlsafe_base64_encode
from django.views import View
from django.views.decorators.csrf import csrf_exempt
from loguru import logger

from backend.apps.account.signals import send_activation_email
from backend.apps.account.token import token_generator
from backend.custom.environment import get_frontend_url


class AccountActivateView(View):
    @method_decorator(csrf_exempt, name="dispatch")
    def dispatch(self, request, *args: Any, **kwargs: Any):
        return super().dispatch(request, *args, **kwargs)

    def post(self, request, uidb64):
        """Send activation account email"""
        user_model = get_user_model()
        try:
            uid = force_str(urlsafe_base64_decode(uidb64))
            user = user_model.objects.get(id=uid)
        except (TypeError, ValueError, OverflowError, user_model.DoesNotExist) as e:
            logger.error(e)
            user = None

        if user:
            send_activation_email(user)
            return JsonResponse({}, status=200)
        else:
            return JsonResponse({}, status=422)


class AccountActivateConfirmView(View):
    @method_decorator(csrf_exempt, name="dispatch")
    def dispatch(self, request, *args: Any, **kwargs: Any):
        return super().dispatch(request, *args, **kwargs)

    def post(self, request, uidb64, token):
        """Verify token and activate account"""
        user_model = get_user_model()
        try:
            uid = force_str(urlsafe_base64_decode(uidb64))
            user = user_model.objects.get(id=uid)
        except (TypeError, ValueError, OverflowError, user_model.DoesNotExist) as e:
            logger.error(e)
            user = None

        if user and token_generator.check_token(user, token):
            user.is_active = True
            user.save()
            return JsonResponse({}, status=200)
        else:
            return JsonResponse({}, status=422)


class PasswordResetView(SuccessMessageMixin, PasswordResetView):
    template_name = "account/password_reset.html"
    success_message = (
        "Enviamos um email com as instruções para você configurar uma nova senha, "
        "caso exista uma conta com o email fornecido. Você deve recebê-lo em breve."
        " Se você não receber o email, "
        "verifique se você digitou o endereço correto e verifique sua caixa de spam."
    )
    success_url = r("home")

    @method_decorator(csrf_exempt, name="dispatch")
    def dispatch(self, request, uidb64):
        """Generate token and send password reset email"""
        user_model = get_user_model()
        try:
            uid = force_str(urlsafe_base64_decode(uidb64))
            user = user_model.objects.get(id=uid)
        except (TypeError, ValueError, OverflowError, user_model.DoesNotExist) as e:
            logger.error(e)
            user = None

        if user:
            to_email = user.email
            from_email = settings.EMAIL_HOST_USER
            subject = "Base dos Dados: Redefinição de Senha"

            token = token_generator.make_token(user)
            uid = urlsafe_base64_encode(force_bytes(user.pk))

            content = render_to_string(
                "account/password_reset_email.html",
                {
                    "name": user.get_full_name(),
                    "domain": get_frontend_url(),
                    "uid": uid,
                    "token": token,
                },
            )

            msg = EmailMultiAlternatives(subject, "", from_email, [to_email])
            msg.attach_alternative(content, "text/html")
            msg.send()

            return JsonResponse({}, status=200)
        else:
            return JsonResponse({}, status=422)


class PasswordResetConfirmView(SuccessMessageMixin, PasswordResetConfirmView):
    template_name = "account/password_reset_confirm.html"
    success_message = "Sua senha foi alterada com sucesso."
    success_url = r("home")

    @method_decorator(csrf_exempt, name="dispatch")
    def dispatch(self, request, uidb64, token):
        """Verify token and reset password"""
        user_model = get_user_model()

        try:
            uid = force_str(urlsafe_base64_decode(uidb64))
            user = user_model.objects.get(id=uid)
        except (TypeError, ValueError, OverflowError, user_model.DoesNotExist) as e:
            logger.error(e)
            user = None

        if user and token_generator.check_token(user, token):
            body = loads(request.body)
            user.set_password(body["password"])
            user.save()
            return JsonResponse({}, status=200)
        else:
            return JsonResponse({}, status=422)



================================================
FILE: backend/apps/account/migrations/0001_initial.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.1.7 on 2023-03-28 16:51

import uuid

import django.db.models.deletion
from django.db import migrations, models

import backend.apps.account.models
import backend.apps.api.v1.validators
import backend.custom.storage


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has "
                        "all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, unique=True, verbose_name="Email"),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        unique=True,
                        verbose_name="Username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=40, verbose_name="Nome"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=40, verbose_name="Sobrenome"),
                ),
                (
                    "birth_date",
                    models.DateField(blank=True, null=True, verbose_name="Data de Nascimento"),
                ),
                (
                    "picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=backend.custom.storage.OverwriteStorage(),
                        upload_to=backend.custom.storage.upload_to,
                        validators=[backend.custom.storage.validate_image],
                        verbose_name="Imagem",
                    ),
                ),
                (
                    "twitter",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Twitter"),
                ),
                (
                    "linkedin",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Linkedin"
                    ),
                ),
                (
                    "github",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Github"),
                ),
                (
                    "website",
                    models.URLField(blank=True, null=True, verbose_name="Website"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Descrição"),
                ),
                (
                    "description_pt",
                    models.TextField(blank=True, null=True, verbose_name="Descrição"),
                ),
                (
                    "description_en",
                    models.TextField(blank=True, null=True, verbose_name="Descrição"),
                ),
                (
                    "description_es",
                    models.TextField(blank=True, null=True, verbose_name="Descrição"),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Indica se tem acesso à administração",
                        verbose_name="Membro da equipe",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indica se o usuário está ativo",
                        verbose_name="Ativo",
                    ),
                ),
                (
                    "profile",
                    models.IntegerField(
                        choices=[(1, "Staff"), (2, "Visitante"), (3, "Colaborador")],
                        default=2,
                        verbose_name="Perfil",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "account",
                "verbose_name_plural": "accounts",
                "db_table": "account",
                "ordering": ["first_name", "last_name"],
            },
        ),
        migrations.CreateModel(
            name="BDGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "BD group",
                "verbose_name_plural": "BD groups",
            },
            managers=[
                ("objects", backend.apps.account.models.BDGroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="RegistrationToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.CharField(default=uuid.uuid4, max_length=255, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("used_at", models.DateTimeField(auto_now=True)),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Registration Token",
                "verbose_name_plural": "Registration Tokens",
            },
        ),
        migrations.CreateModel(
            name="BDRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="roles",
                        related_query_name="role",
                        to="auth.permission",
                        verbose_name="Permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "BD role",
                "verbose_name_plural": "BD roles",
            },
            managers=[
                ("objects", backend.apps.account.models.BDRoleManager()),
            ],
        ),
        migrations.CreateModel(
            name="BDGroupRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="account.bdgroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "BD group role",
                "verbose_name_plural": "BD group roles",
            },
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0002_initial.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.1.7 on 2023-03-28 16:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("v1", "0001_initial"),
        ("account", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="bdgrouprole",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="group_roles",
                related_query_name="group_role",
                to="v1.organization",
            ),
        ),
        migrations.AddField(
            model_name="bdgrouprole",
            name="role",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="account.bdrole"
            ),
        ),
        migrations.AddField(
            model_name="bdgroup",
            name="roles",
            field=models.ManyToManyField(
                blank=True,
                related_name="groups",
                related_query_name="group",
                through="account.BDGroupRole",
                to="account.bdrole",
                verbose_name="Roles",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                related_name="users",
                related_query_name="user",
                to="account.bdgroup",
                verbose_name="Grupos",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="organizations",
            field=models.ManyToManyField(
                blank=True,
                related_name="users",
                related_query_name="user",
                to="v1.organization",
                verbose_name="Organizações",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="bdgrouprole",
            constraint=models.UniqueConstraint(
                fields=("group", "role", "organization"),
                name="unique_group_role_organization",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0003_account_full_name.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.1.7 on 2023-03-30 20:40

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0002_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="account",
            name="full_name",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="Nome Completo"
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0004_account_ckan_id.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.1.7 on 2023-03-31 14:25

import uuid

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0003_account_full_name"),
    ]

    operations = [
        migrations.AddField(
            model_name="account",
            name="ckan_id",
            field=models.UUIDField(default=uuid.uuid4),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0005_rename_ckan_id_account_uuid_account_staff_groups_and_more.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.1 on 2023-05-04 18:29

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("account", "0004_account_ckan_id"),
    ]

    operations = [
        migrations.RenameField(
            model_name="account",
            old_name="ckan_id",
            new_name="uuid",
        ),
        migrations.AddField(
            model_name="account",
            name="staff_groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="Grupos de acesso ao admin",
                related_name="users",
                related_query_name="user",
                to="auth.group",
                verbose_name="Grupos Internos",
            ),
        ),
        migrations.AlterField(
            model_name="account",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="Grupos de acesso ao app externo da BD",
                related_name="users",
                related_query_name="user",
                to="account.bdgroup",
                verbose_name="Grupos Externos",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0006_add_internal_careers_model.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.1 on 2023-08-13 17:27

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0005_rename_ckan_id_account_uuid_account_staff_groups_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Career",
            fields=[
                (
                    "id",
                    models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False),
                ),
                (
                    "team",
                    models.CharField(blank=True, max_length=40, verbose_name="Equipe"),
                ),
                (
                    "role",
                    models.CharField(blank=True, max_length=40, verbose_name="Cargo"),
                ),
                (
                    "level",
                    models.CharField(blank=True, max_length=40, verbose_name="Nível"),
                ),
                (
                    "start_at",
                    models.DateField(null=True, verbose_name="Data de Início"),
                ),
                ("end_at", models.DateField(null=True, verbose_name="Data de Término")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Career",
                "verbose_name_plural": "Careers",
            },
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0007_alter_career_end_at_alter_career_start_at.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.4 on 2023-08-21 19:31

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0006_add_internal_careers_model"),
    ]

    operations = [
        migrations.AlterField(
            model_name="career",
            name="end_at",
            field=models.DateField(blank=True, null=True, verbose_name="Data de Término"),
        ),
        migrations.AlterField(
            model_name="career",
            name="start_at",
            field=models.DateField(blank=True, null=True, verbose_name="Data de Início"),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0008_alter_account_is_active.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.4 on 2023-08-22 00:36

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0007_alter_career_end_at_alter_career_start_at"),
    ]

    operations = [
        migrations.AlterField(
            model_name="account",
            name="is_active",
            field=models.BooleanField(
                default=False,
                help_text="Indica se o usuário está ativo",
                verbose_name="Ativo",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0009_alter_career_account.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.4 on 2023-09-13 23:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0008_alter_account_is_active"),
    ]

    operations = [
        migrations.AlterField(
            model_name="career",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="careers",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0010_alter_account_is_admin.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.5 on 2023-10-05 20:40

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0009_alter_career_account"),
    ]

    operations = [
        migrations.AlterField(
            model_name="account",
            name="is_admin",
            field=models.BooleanField(
                default=False,
                help_text="Indica se tem acesso à administração",
                verbose_name="Admin",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0011_subscription.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.6 on 2023-11-12 19:43

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0010_alter_account_is_admin"),
    ]

    operations = [
        migrations.CreateModel(
            name="Subscription",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Indica se a inscrição está ativa",
                        verbose_name="Ativo",
                    ),
                ),
                (
                    "admin",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="admin_subscription",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("subscribers", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
            },
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0012_subscription_subscription.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.6 on 2023-11-27 18:48

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("djstripe", "0012_2_8"),
        ("account", "0011_subscription"),
    ]

    operations = [
        migrations.AddField(
            model_name="subscription",
            name="subscription",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="internal_subscription",
                to="djstripe.subscription",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0013_alter_subscription_admin.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.6 on 2023-11-28 05:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0012_subscription_subscription"),
    ]

    operations = [
        migrations.AlterField(
            model_name="subscription",
            name="admin",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="admin_subscription",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0014_alter_subscription_admin.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.6 on 2023-11-29 22:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0013_alter_subscription_admin"),
    ]

    operations = [
        migrations.AlterField(
            model_name="subscription",
            name="admin",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="internal_subscription",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0015_account_is_email_visible.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.6 on 2023-12-14 01:37

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0014_alter_subscription_admin"),
    ]

    operations = [
        migrations.AddField(
            model_name="account",
            name="is_email_visible",
            field=models.BooleanField(
                default=False,
                help_text="Indica se o email do usuário é público",
                verbose_name="Email é visível",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0016_account_deleted_at.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.6 on 2024-01-16 01:01

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0015_account_is_email_visible"),
    ]

    operations = [
        migrations.AddField(
            model_name="account",
            name="deleted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0017_account_available_for_research_and_more.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.10 on 2024-06-03 22:14

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0016_account_deleted_at"),
    ]

    operations = [
        migrations.AddField(
            model_name="account",
            name="available_for_research",
            field=models.TextField(
                blank=True,
                choices=[("YES", "Sim"), ("NO", "Não")],
                null=True,
                verbose_name="Se gostaria de participar de pesquisas",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="discovery_method",
            field=models.TextField(
                blank=True,
                choices=[
                    ("SOCIAL_MEDIA", "Redes sociais"),
                    ("REFERRAL", "Indicação"),
                    ("ONLINE_SEARCH", "Pesquisa online"),
                    ("EVENTS", "Eventos"),
                    ("ADVERTISING", "Publicidade"),
                    ("OTHER", "Outros"),
                ],
                null=True,
                verbose_name="Como conheceu a ONG",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="work_area",
            field=models.TextField(
                blank=True,
                choices=[
                    ("TECNOLOGIA", "Tecnologia"),
                    ("SAUDE", "Saúde"),
                    ("FINANCEIRO", "Financeiro"),
                    ("EDUCACAO", "Educação"),
                    ("VAREJO", "Varejo"),
                    ("ENERGIA", "Energia"),
                    ("JORNALISMO", "Jornalismo"),
                    ("OUTRA", "Outra"),
                ],
                null=True,
                verbose_name="Área",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="work_data_tool",
            field=models.TextField(
                blank=True,
                choices=[
                    ("SQL", "SQL"),
                    ("PYTHON", "Python"),
                    ("R", "R"),
                    ("STATA", "Stata"),
                    ("EXCEL", "Excel"),
                    ("NONE", "Nenhuma"),
                    ("OTHER", "Outra"),
                ],
                null=True,
                verbose_name="Ferramenta principal de análise de dados",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="work_goal",
            field=models.TextField(
                blank=True,
                choices=[
                    ("MARKET_ANALYSIS", "Análise de mercado"),
                    ("COMPETITOR_MONITORING", "Monitoramento de concorrência"),
                    ("ACADEMIC_RESEARCH", "Pesquisa acadêmica"),
                    ("RISK_MANAGEMENT", "Gestão de riscos"),
                    ("PRODUCT_DEVELOPMENT", "Desenvolvimento de produto"),
                    ("COMPLIANCE_REGULATORY", "Compliance e regulatório"),
                    ("PUBLIC_POLICY_ANALYSIS", "Análise de políticas públicas"),
                    ("OTHER", "Outro"),
                ],
                null=True,
                verbose_name="Objetivo com a ONG",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="work_role",
            field=models.TextField(
                blank=True,
                choices=[
                    ("CEO_DIRETOR", "CEO/Diretor(a)"),
                    ("GERENTE", "Gerente"),
                    ("COORDENADOR", "Coordenador(a)"),
                    ("ANALISTA", "Analista"),
                    ("CONSULTOR", "Consultor(a)"),
                    ("ESPECIALISTA", "Especialista"),
                    ("ASSISTENTE", "Assistente"),
                    ("ESTAGIARIO", "Estagiário(a)"),
                    ("ESTUDANTE", "Estudante"),
                    ("PROFESSOR_PESQUISADOR", "Professor(a)/Pesquisador(a)"),
                    ("FREELANCER", "Freelancer"),
                    ("EMPREENDEDOR", "Empreendedor(a)"),
                    ("OUTRO", "Outro"),
                ],
                null=True,
                verbose_name="Cargo",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="work_size",
            field=models.TextField(
                blank=True,
                choices=[
                    ("PEQUENA_1_10", "1-10 funcionários"),
                    ("PEQUENA_11_50", "11-50 funcionários"),
                    ("MEDIA_51_200", "51-200 funcionários"),
                    ("MEDIA_201_500", "201-500 funcionários"),
                    ("GRANDE_MAIS_500", "Mais de 500 funcionários"),
                ],
                null=True,
                verbose_name="Tamanho da empresa",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0018_account_gcp_email.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.16 on 2024-09-29 22:44

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0017_account_available_for_research_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="account",
            name="gcp_email",
            field=models.EmailField(
                blank=True, max_length=254, null=True, verbose_name="GCP email"
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0019_role_team_alter_career_end_at_alter_career_level_and_more.py
================================================
# Generated by Django 4.2.18 on 2025-02-04 04:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0018_account_gcp_email"),
    ]

    operations = [
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                ("name", models.CharField(max_length=100, unique=True, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                ("name", models.CharField(max_length=100, unique=True, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Team",
                "verbose_name_plural": "Teams",
                "ordering": ["name"],
            },
        ),
        migrations.AlterField(
            model_name="career",
            name="end_at",
            field=models.DateField(blank=True, null=True, verbose_name="End at"),
        ),
        migrations.AlterField(
            model_name="career",
            name="level",
            field=models.CharField(blank=True, max_length=40, verbose_name="Level"),
        ),
        migrations.AlterField(
            model_name="career",
            name="role",
            field=models.CharField(blank=True, max_length=40, verbose_name="Role"),
        ),
        migrations.AlterField(
            model_name="career",
            name="start_at",
            field=models.DateField(blank=True, null=True, verbose_name="Start at"),
        ),
        migrations.AddField(
            model_name="career",
            name="team_new",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="careers",
                to="account.team",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0020_career_role_new.py
================================================
# Generated by Django 4.2.18 on 2025-02-04 04:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0019_role_team_alter_career_end_at_alter_career_level_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="career",
            name="role_new",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="careers",
                to="account.role",
            ),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0021_rename_role_career_role_old_and_more.py
================================================
# Generated by Django 4.2.18 on 2025-02-05 00:43

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0020_career_role_new"),
    ]

    operations = [
        migrations.RenameField(
            model_name="career",
            old_name="role",
            new_name="role_old",
        ),
        migrations.RenameField(
            model_name="career",
            old_name="team",
            new_name="team_old",
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0022_rename_role_new_career_role_and_more.py
================================================
# Generated by Django 4.2.18 on 2025-02-06 00:43

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0021_rename_role_career_role_old_and_more"),
    ]

    operations = [
        migrations.RenameField(
            model_name="career",
            old_name="role_new",
            new_name="role",
        ),
        migrations.RenameField(
            model_name="career",
            old_name="team_new",
            new_name="team",
        ),
    ]



================================================
FILE: backend/apps/account/migrations/0023_alter_career_role_old_alter_career_team_old.py
================================================
# Generated by Django 4.2.18 on 2025-02-06 00:47

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("account", "0022_rename_role_new_career_role_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="career",
            name="role_old",
            field=models.CharField(blank=True, max_length=40, verbose_name="Role (old)"),
        ),
        migrations.AlterField(
            model_name="career",
            name="team_old",
            field=models.CharField(blank=True, max_length=40, verbose_name="Team (old)"),
        ),
    ]



================================================
FILE: backend/apps/account/migrations/__init__.py
================================================



================================================
FILE: backend/apps/account/templates/account/activation_email.html
================================================
<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body style="
  display: block;
  margin: 0 auto;
  width: 100%;
  max-width: 600px;
  padding: 0 28px;
  box-sizing: content-box;
">
  <a href="https://basedosdados.org" target="_blank" style="display: flex; width: 100%;">
    <img alt="logo" style="width: 75px; margin: 0 auto;" src="https://basedosdados.github.io/mais/images/bd_minilogo.png">
  </a>

  <h1 style="width: 100%; padding-top: 32px; margin: 0 0 16px; border-top: 1px solid #DEDFE0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 700; line-height: 24px;">Olá, {{ name }}</h1>

  <div style="display: block; width: 100%; margin: 16px 0;">
    <p style="width: 100%; margin: 0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 400; line-height: 22px; margin-bottom: 8px;">Informamos que o seu cadastro na Base dos Dados foi realizado com sucesso!</p>
    <p style="width: 100%; margin: 0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 400; line-height: 22px;">Para começar a aproveitar todos os benefícios da nossa plataforma, clique no botão abaixo para verificar o seu e-mail e concluir o cadastro:</p>
  </div>

  <a
    href="https://{{ domain }}/user/activate-account?q={{ uid }}&p={{ token }}"
    style="
      color: #FFF;
      background-color: #42B0FF;
      border-radius: 30px;
      text-decoration: none;
      display: block;
      text-align: center;
      width: 160px;
      padding: 8px 16px;
      margin: 0 auto;
      font-size: 14px;
      font-weight: 700;
      line-height: 24px;
      letter-spacing: 0.2px;
      font-family: Arial;
    ">Verificar meu e-mail</a>

  <span style="display: block; width: 100%; margin: 32px 0; border-top: 1px solid #DEDFE0;"></span>

  <p style="color: #6F6F6F; text-align: center; font-family: Arial; font-size: 13px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; margin: 0;">Se você não realizou o cadastro em nossa plataforma, pedimos que desconsidere este comunicado. Não é necessário realizar nenhuma ação adicional.</p>

  <span style="display: block; width: 100%; margin: 32px 0; border-top: 1px solid #DEDFE0;"></span>

  <div style="display: block; width: 100%; margin: 0 auto;">
    <p style="text-align: center; color: #A3A3A3; font-family: Arial; font-size: 12px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; margin: 0;">Esta mensagem foi enviada pela</p>
    <p style="text-align: center; color: #A3A3A3; font-family: Arial; font-size: 12px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; text-decoration: none; margin: 0;">Base dos Dados</p>
  </div>

  <style>
    @media (max-width: 600px) {
      body {
        max-width: 100%;
        padding: 0 28px;
      }
    }
  </style>
</body>

</html>



================================================
FILE: backend/apps/account/templates/account/creation_bd_pro.html
================================================
<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body style="
  display: block;
  margin: 0 auto;
  width: 100%;
  max-width: 600px;
  padding: 0 28px;
  box-sizing: content-box;
">
  <a href="https://basedosdados.org" target="_blank" style="display: flex; width: 100%;">
    <img alt="logo" style="width: 75px; margin: 0 auto;" src="https://basedosdados.github.io/mais/images/bd_minilogo.png">
  </a>

  <h1 style="width: 100%; padding-top: 32px; margin: 0 0 16px; border-top: 1px solid #DEDFE0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 700; line-height: 24px;">Olá, {{ name }}</h1>

  <div style="display: block; width: 100%; margin: 16px 0;">
    <p style="width: 100%; margin: 0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 400; line-height: 22px; margin-bottom: 8px;">Obrigado por assinar nosso produto! Ficamos felizes em informar que uma conta já foi criada para você em nossa plataforma.</p>
    <p style="width: 100%; margin: 0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 400; line-height: 22px; margin-bottom: 8px;">Utilizando o seu email e nome de usuário associados à assinatura.</p>
    <p style="width: 100%; margin: 0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 400; line-height: 22px;">Para acessar sua conta, basta definir uma senha.</p>
  </div>

  <a
    href="http://{{ domain }}/reset_password/{{ uid }}/{{ token }}/"
    style="
      color: #FFF;
      background-color: #42B0FF;
      border-radius: 30px;
      text-decoration: none;
      display: block;
      text-align: center;
      width: 160px;
      padding: 8px 16px;
      margin: 0 auto;
      font-size: 14px;
      font-weight: 700;
      line-height: 24px;
      letter-spacing: 0.2px;
      font-family: Arial;
    ">Definir Senha</a>

  <span style="display: block; width: 100%; margin: 32px 0; border-top: 1px solid #DEDFE0;"></span>

  <p style="color: #6F6F6F; text-align: center; font-family: Arial; font-size: 13px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; margin: 0;">Se você tiver alguma dúvida ou precisar de assistência, não hesite em nos contatar. Estamos aqui para ajudar!</p>

  <span style="display: block; width: 100%; margin: 32px 0; border-top: 1px solid #DEDFE0;"></span>

  <div style="display: block; width: 100%; margin: 0 auto;">
    <p style="text-align: center; color: #A3A3A3; font-family: Arial; font-size: 12px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; margin: 0;">Esta mensagem foi enviada pela</p>
    <p style="text-align: center; color: #A3A3A3; font-family: Arial; font-size: 12px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; text-decoration: none; margin: 0;">Base dos Dados</p>
  </div>

  <style>
    @media (max-width: 600px) {
      body {
        max-width: 100%;
        padding: 0 28px;
      }
    }
  </style>
</body>

</html>



================================================
FILE: backend/apps/account/templates/account/password_reset_email.html
================================================
<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body style="
  display: block;
  margin: 0 auto;
  width: 100%;
  max-width: 600px;
  font-family: 'Lato',sans-serif;
  padding: 0 28px;
  box-sizing: content-box;
">

  <a href="https://basedosdados.org" target="_blank" style="display: flex; width: 100%;">
    <img alt="logo" style="width: 75px; margin: 0 auto;" src="https://basedosdados.github.io/mais/images/bd_minilogo.png">
  </a>

  <h1 style="width: 100%; padding-top: 32px; margin: 0 0 16px; border-top: 1px solid #DEDFE0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 700; line-height: 24px;">Olá, {{ name }}</h1>

  <div style="display: block; width: 100%; margin: 16px 0;">
    <p style="width: 100%; margin: 0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 400; line-height: 22px; margin-bottom: 8px;">Recebemos uma solicitação de redefinição de senha para a sua conta na Base dos Dados.</p>
    <p style="width: 100%; margin: 0; color: #252A32; font-family: Arial; font-size: 14px; font-style: normal; font-weight: 400; line-height: 22px;">Para criar uma nova senha, clique no botão abaixo:</p>
  </div>

  <a
    href="https://{{ domain }}/user/password-recovery?q={{ uid }}&p={{ token }}"
    style="
      color: #FFF;
      background-color: #42B0FF;
      border-radius: 30px;
      text-decoration: none;
      display: block;
      text-align: center;
      width: 160px;
      padding: 8px 16px;
      margin: 0 auto;
      font-size: 14px;
      font-weight: 700;
      line-height: 24px;
      letter-spacing: 0.2px;
      font-family: Arial;
  ">Redefinir minha senha</a>

  <span style="display: block; width: 100%; margin: 32px 0; border-top: 1px solid #DEDFE0;"></span>

  <div style="display: block; width: 100%; margin: 0 auto;">
    <p style="color: #6F6F6F; text-align: center; font-family: Arial; font-size: 13px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; margin: 0;">
      Se você não fez essa solicitação, ignore este e-mail. A sua senha atual continuará válida e segura. Caso tenha alguma dúvida ou precise de suporte, entre em contato através do e-mail
    </p>
    <p style="width: 100%; text-align: center; color: #6F6F6F; margin: 0; font-family: Arial; font-size: 13px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; margin: 0; text-decoration: none;">
      contato@basedosdados.org
    </p>
  </div>

  <span style="display: block; width: 100%; margin: 32px 0; border-top: 1px solid #DEDFE0;"></span>

  <div style="display: block; width: 100%; margin: 0 auto;">
    <p style="text-align: center; color: #A3A3A3; font-family: Arial; font-size: 12px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; margin: 0;">Esta mensagem foi enviada pela</p>
    <p style="text-align: center; color: #A3A3A3; font-family: Arial; font-size: 12px; font-weight: 400; line-height: 18px; letter-spacing: 0.2px; text-decoration: none; margin: 0;">Base dos Dados</p>
  </div>

  <style>
    @media (max-width: 600px) {
      body {
        max-width: 100%;
        padding: 0 28px;
      }
    }
  </style>
</body>
</html>



================================================
FILE: backend/apps/account_auth/__init__.py
================================================



================================================
FILE: backend/apps/account_auth/admin.py
================================================
# -*- coding: utf-8 -*-
from django.contrib import admin

from backend.apps.account_auth.models import (
    Access,
    Domain,
    Token,
)


class AccessInline(admin.TabularInline):
    model = Access


class DomainAdmin(admin.ModelAdmin):
    list_display = ("name", "description", "is_active")
    inlines = [AccessInline]


class TokenAdmin(admin.ModelAdmin):
    list_display = ("user", "domain", "is_active")
    inlines = [AccessInline]


class AccessAdmin(admin.ModelAdmin):
    list_display = ("timestamp", "success", "domain")


admin.site.register(Domain, DomainAdmin)
admin.site.register(Token, TokenAdmin)
admin.site.register(Access, AccessAdmin)



================================================
FILE: backend/apps/account_auth/apps.py
================================================
# -*- coding: utf-8 -*-
from django.apps import AppConfig


class AuthConfig(AppConfig):
    name = "backend.apps.account_auth"
    verbose_name = "Autenticação e Autorização Interna"
    default_auto_field = "django.db.models.BigAutoField"



================================================
FILE: backend/apps/account_auth/models.py
================================================
# -*- coding: utf-8 -*-
from uuid import uuid4

from django.conf import settings
from django.db import models

USER_MODEL = settings.AUTH_USER_MODEL


class Domain(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name


class Token(models.Model):
    user = models.ForeignKey(USER_MODEL, on_delete=models.CASCADE, related_name="tokens")
    domain = models.ForeignKey(Domain, on_delete=models.CASCADE, related_name="tokens")
    token = models.CharField(max_length=255, editable=False, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)
    expiry_date = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"{self.user.username} - {self.domain} - {self.token}"

    def generate_token(self):
        return str(uuid4())

    def save(self):
        self.token = self.generate_token()
        super().save()


class Access(models.Model):
    user = models.ForeignKey(USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)
    token = models.ForeignKey(
        Token, on_delete=models.CASCADE, related_name="accesses", null=True, blank=True
    )
    domain = models.ForeignKey(
        Domain,
        on_delete=models.CASCADE,
        related_name="accesses",
        null=True,
        blank=True,
    )
    timestamp = models.DateTimeField(auto_now_add=True)
    success = models.BooleanField()

    def __str__(self):
        return (
            f"{self.timestamp} - {'OK' if self.success else 'ERR'} - "
            f"{self.domain if self.domain else 'NO_DOMAIN'} - "
            f"{self.token.user.username if self.token else 'NO_TOKEN'}"
        )



================================================
FILE: backend/apps/account_auth/tests.py
================================================
# -*- coding: utf-8 -*-

# Create your tests here.



================================================
FILE: backend/apps/account_auth/urls.py
================================================
# -*- coding: utf-8 -*-
from django.urls import path

from . import views

urlpatterns = [
    path("auth/", views.auth, name="auth"),
    path("auth/login/", views.signin, name="login"),
    path("auth/logout/", views.signout, name="logout"),
]



================================================
FILE: backend/apps/account_auth/views.py
================================================
# -*- coding: utf-8 -*-
from typing import Tuple, Union
from urllib.parse import urlparse

from django.conf import settings
from django.contrib.auth import authenticate, login, logout
from django.http import HttpRequest, HttpResponse
from django.shortcuts import redirect, render
from django.utils import timezone
from requests import post

from backend.apps.account.models import Account
from backend.apps.account_auth.models import Access, Domain, Token

URI = str
Status = bool


def auth(request: HttpRequest) -> HttpResponse:
    _, token, domain, user, success = authorize(request)
    if success:
        return HttpResponse(status=200)
    if not success:
        store_access(token=token, domain=domain, user=user, success=success)
    return HttpResponse(status=401)


def signin(request: HttpRequest) -> HttpResponse:
    redirect_uri, _, _, user, success = authorize(request)
    if success and redirect_uri:
        return redirect(redirect_uri)
    if success and not redirect_uri:
        return HttpResponse(
            "Please specify a redirect URL. <a href='/auth/logout/'>Sign out</a>.",
            status=422,
        )
    if request.user and request.user.is_authenticated and redirect_uri:
        return HttpResponse(
            "Please contact the support. <a href='/auth/logout/'>Sign out</a>.",
            status=403,
        )
    if request.user and request.user.is_authenticated and not redirect_uri:
        return HttpResponse(
            "Please contact the support. <a href='/auth/logout/'>Sign out</a>.",
            status=422,
        )
    if request.method == "GET":
        return render(
            request,
            "signin.html",
            context={"recaptcha_site_key": settings.RECAPTCHA_SITE_KEY},
        )
    if request.method == "POST":
        username = request.POST.get("username", None)
        password = request.POST.get("password", None)
        recaptcha_response = request.POST.get("g-recaptcha-response", None)
        if not recaptcha_response or not validate_recaptcha_token(recaptcha_response):
            return HttpResponse(
                "Invalid captcha. <a href='/auth/login/'>Try again</a>.",
                status=401,
            )
        if username and password:
            if user := authenticate(request, username=username, password=password):
                login(request, user)
                if redirect_uri:
                    return redirect(redirect_uri)
                return HttpResponse(
                    "Please specify a redirect URL. <a href='/auth/logout/'>Sign out</a>.",
                    status=422,
                )
        return HttpResponse(
            "Invalid username or password. <a href='/auth/login/'>Try again</a>.",
            status=401,
        )


def signout(request: HttpRequest) -> HttpResponse:
    if request.user.is_authenticated:
        logout(request)
    return redirect("login")


def authorize(request: HttpRequest) -> Tuple[URI, Token, Domain, Account, Status]:
    # Tries to extract the desired domain from the request.
    redirect_uri = get_redirect_uri(request)
    if not redirect_uri:
        # If it fails, it returns false.
        return redirect_uri, None, None, None, False

    # Tries to find the domain in the database.
    redirect_domain = urlparse(redirect_uri).netloc
    try:
        domain = Domain.objects.get(name=redirect_domain)
    except Domain.DoesNotExist:
        # If it fails, it returns false.
        return redirect_uri, None, None, None, False

    # If there's an user logged in
    if request.user.is_authenticated:
        # If user is staff, it returns true
        if request.user.is_staff:
            return redirect_uri, None, domain, request.user, True
        # If user is not staff, it iterates over its tokens
        for token in request.user.tokens.all():
            # If it finds one, it returns true.
            if token.domain == domain:
                return redirect_uri, token, domain, request.user, True
        # If it doesn't, it returns false.
        return redirect_uri, None, domain, request.user, False

    # Finally, if no user is logged in,
    # tries to extract the token from the request headers
    token = request.headers.get("Authorization", None)
    if not token:
        # If it fails, it returns false
        return redirect_uri, None, domain, None, False

    # If it finds the Authorization header, extract token
    try:
        token = token.split(" ")[1]
    except IndexError:
        # If it fails, it returns false.
        return redirect_uri, None, domain, None, False

    # If it finds one, it checks if it's valid for the domain.
    try:
        token: Token = Token.objects.get(token=token)
    except Token.DoesNotExist:
        # If it fails, it returns false.
        return redirect_uri, None, domain, None, False

    # Token must have same domain,
    # its expiry date must be in the future, and it must be active.
    if token.domain == domain and token.is_active:
        if not token.expiry_date or token.expiry_date > timezone.now():
            return redirect_uri, token, domain, token.user, True

    # If it isn't, it returns a 401.
    return redirect_uri, token, domain, token.user, False


def store_access(
    token: Union[str, Token], domain: Union[str, Domain], user: Account, success: bool
) -> None:
    try:
        if isinstance(token, str):
            token: Token = Token.objects.get(token=token)
    except Token.DoesNotExist:
        token = None
    try:
        if isinstance(domain, str):
            domain: Domain = Domain.objects.get(name=domain)
    except Domain.DoesNotExist:
        domain = None
    if user is None and token is not None:
        user = token.user
    access = Access(token=token, domain=domain, success=success, user=user)
    access.save()


def get_redirect_uri(request: HttpRequest, default: str = None) -> str:
    if redirect_uri := request.headers.get("X-Original-URL", None):
        return redirect_uri
    if redirect_uri := request.GET.get("rd", None):
        return redirect_uri
    return default


def validate_recaptcha_token(token: str) -> bool:
    url = "https://www.google.com/recaptcha/api/siteverify"
    data = {"secret": settings.RECAPTCHA_SECRET_KEY, "response": token}
    response = post(url, data=data)
    return response.json()["success"]



================================================
FILE: backend/apps/account_auth/migrations/0001_initial.py
================================================
# -*- coding: utf-8 -*-
# Generated by Django 4.2.10 on 2024-03-24 14:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Domain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("token", models.CharField(editable=False, max_length=255, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("expiry_date", models.DateTimeField(blank=True, null=True)),
                (
                    "domain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tokens",
                        to="account_auth.domain",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Access",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("success", models.BooleanField()),
                (
                    "domain",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accesses",
                        to="account_auth.domain",
                    ),
                ),
                (
                    "token",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accesses",
                        to="account_auth.token",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]



================================================
FILE: backend/apps/account_auth/migrations/__init__.py
================================================



================================================
FILE: backend/apps/account_auth/static/js/captcha_submit.js
================================================
function captchaSubmit(data) {
  document.getElementById("login-form").submit();
}



================================================
FILE: backend/apps/account_auth/templates/signin.html
================================================
{% extends "registration/base.html" %}

{% load i18n jazzmin %}
{% get_jazzmin_settings request as jazzmin_settings %}
{% get_jazzmin_ui_tweaks as jazzmin_ui %}

{% block extrastyle %}
    <style>
        .g-recaptcha {
            display: grid;
            place-items: center;
            margin-bottom: 12px;
        }
    </style>
{% endblock %}

{% block extrahead %}
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
{% endblock %}

{% block content %}
    <p class="login-box-msg">{{ jazzmin_settings.welcome_sign }}</p>
    <form action="{{ app_path }}" method="post">
        {% csrf_token %}
        {% if user.is_authenticated %}
            <p class="errornote">
                <div class="callout callout-danger">
                    <p>
                        {% blocktrans trimmed %}
                            You are authenticated as {{ username }}, but are not authorized to
                            access this page. Would you like to login to a different account?
                        {% endblocktrans %}
                    </p>
                </div>
            </p>
        {% endif %}
        {% if form.errors %}
            {% if form.username.errors %}
                <div class="callout callout-danger">
                    <p>{{ form.username.label }}: {{ form.username.errors|join:', ' }}</p>
                </div>
            {% endif %}
            {% if form.password.errors %}
                <div class="callout callout-danger">
                    <p>{{ form.password.label }}: {{ form.password.errors|join:', ' }}</p>
                </div>
            {% endif %}
            {% if form.non_field_errors %}
                <div class="callout callout-danger">
                    {% for error in form.non_field_errors %}
                        <p>{{ error }}</p>
                    {% endfor %}
                </div>
            {% endif %}
        {% endif %}
        <div class="input-group mb-3">
            <input type="text" name="username" class="form-control" placeholder="{{ form.username.label }}" required>
            <div class="input-group-append">
                <div class="input-group-text">
                    <span class="fas fa-user"></span>
                </div>
            </div>
        </div>
        <div class="input-group mb-3">
            <input type="password" name="password" class="form-control" placeholder="{{ form.password.label }}" required>
            <div class="input-group-append">
                <div class="input-group-text">
                    <span class="fas fa-lock"></span>
                </div>
            </div>
        </div>
        <div class="g-recaptcha fadeIn second" data-sitekey="{{ recaptcha_site_key }}"></div>
        {% url 'admin_password_reset' as password_reset_url %}
        {% if password_reset_url %}
            <div class="mb-3">
                <div class="password-reset-link" style="text-align: center;">
                    <a href="{{ password_reset_url }}">
                        {% trans 'Forgotten your password or username?' %}
                    </a>
                </div>
            </div>
        {% endif %}
        <div class="row">
            <div class="col-12">
                <button type="submit" class="btn {{ jazzmin_ui.button_classes.primary }} btn-block">
                    {% trans "Log in" %}
                </button>
            </div>
        </div>
    </form>
{% endblock %}



================================================
FILE: backend/apps/account_payment/__init__.py
================================================



================================================
FILE: backend/apps/account_payment/admin.py
================================================
# -*- coding: utf-8 -*-
from django.contrib import admin  # noqa

# Register your models here.



================================================
FILE: backend/apps/account_payment/apps.py
================================================
# -*- coding: utf-8 -*-
from djstripe.apps import DjstripeAppConfig


class PaymentConfig(DjstripeAppConfig):
    verbose_name = "Pagamentos"

    def ready(self):
        super().ready()
        import backend.apps.account_payment.signals  # noqa
        import backend.apps.account_payment.webhooks  # noqa



================================================
FILE: backend/apps/account_payment/graphql.py
================================================
# -*- coding: utf-8 -*-
import stripe
from django.conf import settings
from djstripe.models import Customer as DJStripeCustomer
from djstripe.models import Price as DJStripePrice
from djstripe.models import Subscription as DJStripeSubscription
from graphene import (
    ID,
    Boolean,
    Field,
    Float,
    InputObjectType,
    Int,
    List,
    Mutation,
    ObjectType,
    String,
)
from graphene_django import DjangoObjectType
from graphene_django.filter import DjangoFilterConnectionField
from graphql_jwt.decorators import login_required
from loguru import logger
from stripe import Customer as StripeCustomer
from stripe import SetupIntent

from backend.apps.account.models import Account, Subscription
from backend.apps.account_payment.webhooks import add_user, is_email_in_group, remove_user
from backend.custom.environment import get_backend_url
from backend.custom.graphql_base import CountableConnection, PlainTextNode

if settings.STRIPE_LIVE_MODE:
    stripe.api_key = settings.STRIPE_LIVE_SECRET_KEY
else:
    stripe.api_key = settings.STRIPE_TEST_SECRET_KEY


class StripePriceNode(DjangoObjectType):
    _id = ID(name="_id")
    amount = Float()
    interval = String()
    trial_period_days = String()
    product_name = String()
    product_slug = String()
    product_slots = String()
    is_active = Boolean()

    class Meta:
        model = DJStripePrice
        fields = ("id",)
        filter_fields = {
            "id": ["exact"],
            "active": ["exact"],
        }
        interfaces = (PlainTextNode,)
        connection_class = CountableConnection

    def resolve__id(root, info):
        return root.djstripe_id

    def resolve_amount(root, info):
        if root.unit_amount:
            return root.unit_amount / 100
        return 0

    def resolve_interval(root, info):
        if recurring := root.recurring:
            return recurring.get("interval", "")

    def resolve_trial_period_days(root, info):
        if recurring := root.recurring:
            return recurring.get("trial_period_days", "")

    def resolve_product_name(root, info):
        return root.product.name

    def resolve_product_slug(root, info):
        return root.product.metadata.get("code", "")

    def resolve_product_slots(root, info):
        return root.product.metadata.get("slots", "0")

    def resolve_is_active(root, info):
        return root.active


class StripeCustomerNode(DjangoObjectType):
    class Meta:
        model = DJStripeCustomer
        fields = ("id",)
        filter_fields = ("id",)
        interfaces = (PlainTextNode,)
        connection_class = CountableConnection


class StripeCustomerAddressInput(InputObjectType):
    line = String()
    city = String()
    state = String()
    country = String()
    postal_code = String()


class StripeCustomerInput(InputObjectType):
    name = String(required=True)
    email = String(required=True)
    address = StripeCustomerAddressInput()


class StripeCustomerCreateMutation(Mutation):
    """Create stripe customer"""

    customer = Field(StripeCustomerNode)
    errors = List(String)

    class Arguments:
        input = StripeCustomerInput()

    @classmethod
    @login_required
    def mutate(cls, root, info, input):
        try:
            admin = info.context.user
            if customer := admin.customer:
                ...
            else:
                customer = DJStripeCustomer.create(admin)
                parameters = {
                    "name": input.name,
                    "email": input.email,
                }
                if input.address:
                    parameters["address"] = {
                        "city": input.address.city,
                        "line1": input.address.line,
                        "state": input.address.state,
                        "country": input.address.country,
                        "postal_code": input.address.postal_code,
                    }
                StripeCustomer.modify(
                    customer.id,
                    **parameters,
                )
            return cls(customer=customer)
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


class StripeCustomerUpdateMutation(Mutation):
    """Update stripe customer"""

    customer = Field(StripeCustomerNode)
    errors = String()

    class Arguments:
        input = StripeCustomerInput()

    @classmethod
    @login_required
    def mutate(cls, root, info, input):
        try:
            account = info.context.user
            customer = account.customer
            StripeCustomer.modify(
                customer.id,
                name=input.name,
                email=input.email,
                address={
                    "city": input.address.city,
                    "line1": input.address.line,
                    "state": input.address.state,
                    "country": input.address.country,
                    "postal_code": input.address.postal_code,
                },
            )
            return cls(customer=customer)
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


class StripeSubscriptionNode(DjangoObjectType):
    client_secret = String()

    class Meta:
        model = DJStripeSubscription
        fields = ("id",)
        filter_fields = ("id",)
        interfaces = (PlainTextNode,)
        connection_class = CountableConnection

    def resolve_client_secret(root, info):
        return root.latest_invoice.payment_intent.client_secret


class StripeSubscriptionCreateMutation(Mutation):
    """Create stripe subscription"""

    client_secret = String()
    errors = List(String)

    class Arguments:
        price_id = ID(required=True)
        coupon = String(required=False)

    @classmethod
    @login_required
    def mutate(cls, root, info, price_id, coupon=None):
        try:
            admin = info.context.user
            internal_subscriptions = admin.internal_subscription.all()

            for s in [
                *admin.subscription_set.all(),
                *internal_subscriptions,
            ]:
                if s.is_active:
                    return cls(errors=["Conta possui inscrição ativa"])

            price = DJStripePrice.objects.get(djstripe_id=price_id)
            is_trial_active = len(internal_subscriptions) == 0
            promotion_code = None

            try:
                promotion = get_stripe_promo(coupon)
                if promotion and promotion.active:
                    promotion_code = promotion.id
            except Exception:
                ...

            customer, _ = DJStripeCustomer.get_or_create(admin)
            price_id = price.id

            if promotion_code:
                discounts = [{"promotion_code": promotion_code}]
            else:
                discounts = []

            if is_trial_active:
                subscription = None
                setup_intent = SetupIntent.create(
                    customer=customer.id,
                    usage="off_session",
                    metadata={
                        "price_id": price_id,
                        "promotion_code": promotion_code,
                        "backend_url": get_backend_url(),
                    },
                )
            else:
                subscription: DJStripeSubscription = customer.subscribe(
                    price=price_id,
                    payment_behavior="default_incomplete",
                    payment_settings={"save_default_payment_method": "on_subscription"},
                    discounts=discounts,
                )

            if subscription:
                payment_intent = subscription.latest_invoice.payment_intent
                return cls(client_secret=payment_intent.client_secret)

            return cls(client_secret=setup_intent.client_secret)
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


class StripeCouponValidationMutation(Mutation):
    """Validate a Stripe coupon and return discount details"""

    is_valid = Boolean()
    discount_amount = Float()
    duration = String()
    duration_in_months = Int()
    errors = List(String)

    class Arguments:
        coupon = String(required=True)
        price_id = ID(required=True)

    @classmethod
    @login_required
    def mutate(cls, root, info, coupon, price_id):
        try:
            try:
                promotion_code_object = get_stripe_promo(coupon)
                if promotion_code_object and promotion_code_object.active:
                    coupon_object = stripe.Coupon.retrieve(promotion_code_object.coupon.id)
                else:
                    return cls(
                        is_valid=False,
                        discount_amount=0,
                        duration_in_months=0,
                        errors=["Cupom inválido"],
                    )
            except Exception as e:
                return cls(
                    is_valid=False,
                    discount_amount=0,
                    duration_in_months=0,
                    errors=["Cupom inválido", str(e)],
                )

            if not coupon_object.valid:
                return cls(
                    is_valid=False,
                    discount_amount=0,
                    duration_in_months=0,
                    errors=["Cupom não está ativo"],
                )

            price = DJStripePrice.objects.get(djstripe_id=price_id)
            price_amount = price.unit_amount / 100.0

            discount_amount = 0.0

            if coupon_object.amount_off:
                discount_amount = coupon_object.amount_off / 100.0
            elif coupon_object.percent_off:
                discount_amount = (coupon_object.percent_off / 100.0) * price_amount

            duration_in_months = coupon_object.duration_in_months
            duration = coupon_object.duration

            if coupon_object.duration != "repeating":
                duration_in_months = 0

            return cls(
                is_valid=True,
                discount_amount=discount_amount,
                duration_in_months=duration_in_months,
                duration=duration,
            )
        except Exception as e:
            logger.error(e)
            return cls(is_valid=False, errors=[str(e)])


class StripeSubscriptionDeleteMutation(Mutation):
    """Delete stripe subscription"""

    subscription = Field(StripeSubscriptionNode)
    errors = List(String)

    class Arguments:
        subscription_id = ID(required=True)

    @classmethod
    @login_required
    def mutate(cls, root, info, subscription_id):
        try:
            subscription = Subscription.objects.get(id=subscription_id)
            stripe_subscription = subscription.subscription
            stripe_subscription.cancel(at_period_end=True)
            return None
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


class StripeSubscriptionCustomerCreateMutation(Mutation):
    """Add account to subscription"""

    ok = Boolean()
    errors = List(String)

    class Arguments:
        account_id = ID(required=True)
        subscription_id = ID(required=True)

    @classmethod
    @login_required
    def mutate(cls, root, info, account_id, subscription_id):
        try:
            admin = info.context.user
            account = Account.objects.get(id=account_id)

            for s in [
                *account.subscription_set.all(),
                *account.internal_subscription.all(),
            ]:
                if s.is_active:
                    return cls(errors=["Conta possui inscrição ativa"])

            subscription = Subscription.objects.get(id=subscription_id)
            assert admin.id == subscription.admin.id
            add_user(account.gcp_email or account.email)
            subscription.subscribers.add(account)
            return cls(ok=True)
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


class StripeSubscriptionCustomerDeleteMutation(Mutation):
    """Remove account from subscription"""

    ok = Boolean()
    errors = List(String)

    class Arguments:
        account_id = ID(required=True)
        subscription_id = ID(required=True)

    @classmethod
    @login_required
    def mutate(cls, root, info, account_id, subscription_id):
        try:
            admin = info.context.user
            account = Account.objects.get(id=account_id)
            subscription = Subscription.objects.get(id=subscription_id)
            assert admin.id == subscription.admin.id
            remove_user(account.gcp_email or account.email)
            subscription.subscribers.remove(account)
            return cls(ok=True)
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


class StripeSubscriptionCustomerAllMembersDeleteMutation(Mutation):
    """Remove all members from subscription"""

    ok = Boolean()
    errors = List(String)

    class Arguments:
        subscription_id = ID(required=True)

    @classmethod
    @login_required
    def mutate(cls, root, info, subscription_id):
        try:
            admin = info.context.user
            subscription = Subscription.objects.get(id=subscription_id)
            assert admin.id == subscription.admin.id

            errors = []
            for account in subscription.subscribers.all():
                try:
                    remove_user(account.gcp_email or account.email)
                except Exception as e:
                    errors.append(f"Erro ao remover {account.email}: {str(e)}")
                    logger.error(f"Falha ao remover usuário {account.email}: {e}")

            subscription.subscribers.clear()

            if errors:
                return cls(ok=False, errors=errors)
            return cls(ok=True)
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


class ChangeUserGCPEmail(Mutation):
    """Change user GCP email"""

    ok = Boolean()
    errors = List(String)

    class Arguments:
        email = String(required=True)

    @classmethod
    @login_required
    def mutate(cls, root, info, email):
        try:
            user = info.context.user
            if user is None:
                return cls(ok=False, errors=["User is none"])

            old_email = user.gcp_email or user.email
            if old_email == email:
                return cls(ok=True)

            user.gcp_email = email
            user.save()

            if is_email_in_group(old_email):
                try:
                    remove_user(old_email)
                except Exception:
                    pass

            subscription = user.pro_subscription

            if subscription is None:
                return cls(ok=True)

            if not is_email_in_group(email):
                try:
                    add_user(email)
                except Exception:
                    pass

            return cls(ok=True)
        except Exception as e:
            logger.error(e)
            return cls(ok=False, errors=[str(e)])


# Query to check based on a email if the user is in a group
class IsEmailInGoogleGroup(Mutation):
    """Check if user is in group"""

    ok = Boolean()
    errors = List(String)

    class Arguments:
        email = String(required=True)

    @classmethod
    @login_required
    def mutate(cls, root, info, email):
        try:
            return cls(ok=is_email_in_group(email))
        except Exception as e:
            logger.error(e)
            return cls(errors=[str(e)])


def get_stripe_promo(promotion_code):
    """
    Helper function to retrieve a Stripe Promotion Code by its code.

    :param promotion_code: The code of the promotion to be retrieved.
    :return: The Stripe Promotion Code object if found.
    :raises Exception: If the promotion code is not found or any error occurs.
    """
    if not promotion_code:
        raise Exception("Promotion code not provided")
    try:
        promotion_code_list = stripe.PromotionCode.list(code=promotion_code, limit=1)

        if promotion_code_list.data:
            return promotion_code_list.data[0]
        else:
            raise Exception("Promotion code not found")

    except Exception as e:
        raise Exception(f"Error retrieving promotion code: {str(e)}")


class Query(ObjectType):
    stripe_price = PlainTextNode.Field(StripePriceNode)
    all_stripe_price = DjangoFilterConnectionField(StripePriceNode)
    is_email_in_google_group = IsEmailInGoogleGroup.Field()


class Mutation(ObjectType):
    create_stripe_customer = StripeCustomerCreateMutation.Field()
    update_stripe_customer = StripeCustomerUpdateMutation.Field()
    create_stripe_subscription = StripeSubscriptionCreateMutation.Field()
    delete_stripe_subscription = StripeSubscriptionDeleteMutation.Field()
    create_stripe_customer_subscription = StripeSubscriptionCustomerCreateMutation.Field()
    update_stripe_customer_subscription = StripeSubscriptionCustomerDeleteMutation.Field()
    delete_stripe_customer_all_members = StripeSubscriptionCustomerAllMembersDeleteMutation.Field()
    validate_stripe_coupon = StripeCouponValidationMutation.Field()
    change_user_gcp_email = ChangeUserGCPEmail.Field()


# Reference
# https://stripe.com/docs/billing/subscriptions/build-subscriptions?ui=elementsf



================================================
FILE: backend/apps/account_payment/models.py
================================================
# -*- coding: utf-8 -*-
from django.db import models  # noqa

# Create your models here.



================================================
FILE: backend/apps/account_payment/signals.py
================================================



================================================
FILE: backend/apps/account_payment/tests.gql
================================================
mutation login($email: String!, $password: String!) {
  tokenAuth(email: $email, password: $password) {
    token
  }
}

query AllStripePrice {
  allStripePrice {
    edges {
      node {
        id
        productName
      }
    }
  }
}

mutation CreateStripeCustomer {
  createStripeCustomer(
    input: {
      name: "John"
      email: "john@basedosdados.org"
      address: {
        line: "Rua Augusta, 100"
        city: "São Paulo"
        state: "SP"
        country: "BR"
        postalCode: "01304-000"
      }
    }
  ) {
    customer {
      id
    }
  }
}

mutation UpdateStripeCustomer {
  updateStripeCustomer(
    input: {
      name: "John Doe"
      email: "john.doe@basedosdados.org"
      address: {
        line: "Rua Augusta, 100"
        city: "São Paulo"
        state: "SP"
        country: "BR"
        postalCode: "01304-000"
      }
    }
  ) {
    customer {
      id
    }
  }
}

mutation CreateStripeSubscription {
  createStripeSubscription(priceId: 1) {
    subscription {
      id
      clientSecret
    }
  }
}

mutation DeleteStripeSubscription {
  deleteStripeSubscription(subscriptionId: 1) {
    subscription {
      id
    }
  }
}



================================================
FILE: backend/apps/account_payment/tests.py
================================================
# -*- coding: utf-8 -*-
from json import loads
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest
from django.test.client import Client
from djstripe.models import Customer as DJStripeCustomer
from graphene_django.utils.testing import graphql_query

from backend.apps.account.models import Account

QUERY = (
    Path(__file__)
    .with_name("tests.gql")
    .read_text()
)  # fmt: skip
GRAPHQL_URL = "/api/graphql/"


@pytest.fixture
def account():
    return Account.objects.create(
        is_active=True,
        username="john.doe",
        password="12345678",
        email="john.doe@email.com",
    )


@pytest.fixture
def customer(account):
    return DJStripeCustomer.objects.create(
        subscriber_id=account.id,
    )


@pytest.fixture
def token(client: Client, account):
    response = graphql_query(
        query=QUERY,
        client=client,
        graphql_url=GRAPHQL_URL,
        operation_name="login",
        variables={
            "email": "john.doe@email.com",
            "password": "12345678",
        },
    )
    result = loads(response.content)
    return result["data"]["tokenAuth"]["token"]


@pytest.fixture
def query(client: Client, token):
    def func(operation_name, *args, **kwargs):
        response = graphql_query(
            *args,
            **kwargs,
            query=QUERY,
            client=client,
            graphql_url=GRAPHQL_URL,
            operation_name=operation_name,
            headers={"HTTP_AUTHORIZATION": f"Bearer {token}"},
        )
        return loads(response.content)

    return func


@pytest.mark.django_db
def test_all_stripe_price_call(query):
    response = query("AllStripePrice")
    assert not response["data"]["allStripePrice"]["edges"]


@pytest.mark.django_db
@patch("backend.apps.payment.graphql.StripeCustomer")
@patch("backend.apps.payment.graphql.DJStripeCustomer")
def test_create_stripe_customer_call(
    djst_customer: MagicMock, strp_customer: MagicMock, query, account
):
    query("CreateStripeCustomer")
    djst_customer.create.assert_called_once()
    strp_customer.modify.assert_called_once()


@pytest.mark.django_db
@patch("backend.apps.payment.graphql.StripeCustomer")
def test_update_stripe_customer_call(strp_customer: MagicMock, query, account, customer):
    query("UpdateStripeCustomer")
    strp_customer.modify.assert_called_once()



================================================
FILE: backend/apps/account_payment/urls.py
================================================
# -*- coding: utf-8 -*-
from django.urls import include, path

urlpatterns = [path("payment/", include("djstripe.urls", namespace="payment"))]



================================================
FILE: backend/apps/account_payment/views.py
================================================



================================================
FILE: backend/apps/account_payment/webhooks.py
================================================
# -*- coding: utf-8 -*-
from django.conf import settings
from djstripe import webhooks
from djstripe.models import Event
from djstripe.models import Subscription as DJStripeSubscription
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import Resource, build
from googleapiclient.errors import HttpError
from loguru import logger
from stripe import Customer as StripeCustomer
from stripe import Subscription as StripeSubscription

from backend.apps.account.models import Account, Subscription
from backend.custom.client import send_discord_message as send
from backend.custom.environment import get_backend_url

logger = logger.bind(module="payment")


def get_subscription(event: Event) -> Subscription:
    """Get internal subscription model, mirror of stripe"""
    logger.info(f"Procurando inscrição interna do cliente {event.customer.email}")
    subscription = DJStripeSubscription.objects.get(id=event.data["object"]["id"])
    internal_subscription = Subscription.objects.filter(subscription=subscription).first()

    if internal_subscription:
        logger.info(f"Retornando inscrição interna do cliente {event.customer.email}")
        return internal_subscription
    else:
        if event.customer.subscriber:
            logger.info(f"Criando inscrição interna do cliente {event.customer.email}")
            return Subscription.objects.create(
                subscription=subscription,
                admin=event.customer.subscriber,
            )


def get_credentials(scopes: list[str] = None, impersonate: str = None):
    """Get google credentials with scope or subject"""
    cred = Credentials.from_service_account_file(
        settings.GOOGLE_APPLICATION_CREDENTIALS,
    )
    if scopes:
        cred = cred.with_scopes(scopes)
    if impersonate:
        cred = cred.with_subject(impersonate)
    return cred


def get_service() -> Resource:
    """Get google directory service"""
    credentials = get_credentials(
        settings.GOOGLE_DIRECTORY_SCOPES,
        settings.GOOGLE_DIRECTORY_SUBJECT,
    )
    return build("admin", "directory_v1", credentials=credentials)


def add_user(email: str, group_key: str = None, role: str = "MEMBER"):
    """Add user to google group"""
    if not group_key:
        group_key = settings.GOOGLE_DIRECTORY_GROUP_KEY
    if "+" in email and email.index("+") < email.index("@"):
        email = email.split("+")[0] + "@" + email.split("@")[1]
    try:
        service = get_service()
        service.members().insert(
            groupKey=group_key,
            body={"email": email, "role": role},
        ).execute()
    except HttpError as e:
        if e.resp.status == 409:
            logger.warning(f"{email} já existe no google groups")
        else:
            send(f"Verifique o erro ao adicionar o usuário ao google groups: {e}")
            logger.error(e)
            raise e


def remove_user(email: str, group_key: str = None) -> None:
    """Remove user from google group"""
    if not group_key:
        group_key = settings.GOOGLE_DIRECTORY_GROUP_KEY
    if "+" in email and email.index("+") < email.index("@"):
        email = email.split("+")[0] + "@" + email.split("@")[1]
    try:
        service = get_service()
        service.members().delete(
            groupKey=group_key,
            memberKey=email.lower(),
        ).execute()
    except HttpError as e:
        if e.resp.status == 404:
            logger.warning(f"{email} já foi removido do google groups")
        else:
            send(f"Verifique o erro ao remover o usuário do google groups '{email}': {e}")
            logger.error(e)
            raise e


def list_user(group_key: str = None):
    """List users from google group"""
    if not group_key:
        group_key = settings.GOOGLE_DIRECTORY_GROUP_KEY
    try:
        service = get_service()
        return service.members().list(groupKey=group_key).execute()
    except Exception as e:
        logger.error(e)
        raise e


def is_email_in_group(email: str, group_key: str = None) -> bool:
    """Check if a user is in a Google group."""
    if not group_key:
        group_key = settings.GOOGLE_DIRECTORY_GROUP_KEY
    if "+" in email and email.index("+") < email.index("@"):
        email = email.split("+")[0] + "@" + email.split("@")[1]

    try:
        service = get_service()
        response = (
            service.members()
            .get(
                groupKey=group_key,
                memberKey=email.lower(),
            )
            .execute()
        )

        member_email = response.get("email")
        if not member_email:
            return False

        return member_email.lower() == email.lower()
    except HttpError as e:
        logger.error(f"Erro ao verificar o usuário {email} no grupo {group_key}: {e}")
        return False
    except Exception as e:
        logger.error(f"Erro inesperado ao verificar o usuário {email}: {e}")
        raise e


@webhooks.handler("customer.updated")
def update_customer(event: Event, **kwargs):
    """Propagate customer email update if exists"""
    account = event.customer.subscriber
    if account and account.email != event.data["object"]["email"]:
        logger.info(f"Atualizando o email do cliente {event.customer.email}")
        account.email = event.data["object"]["email"]
        account.save(update_fields=["email"])


def handle_subscription(event: Event):
    """Handle subscription status"""
    subscription = get_subscription(event)
    account = Account.objects.filter(email=event.customer.email).first()

    if event.data["object"]["status"] in ["trialing", "active"]:
        if subscription:
            logger.info(f"Adicionando a inscrição do cliente {event.customer.email}")
            subscription.is_active = True
            subscription.save()

        # Add user to google group if subscription exists or not
        if account:
            add_user(account.gcp_email or account.email)
        else:
            add_user(event.customer.email)
    else:
        if subscription:
            logger.info(f"Removendo a inscrição do cliente {event.customer.email}")
            subscription.is_active = False
            subscription.save()
        # Remove user from google group if subscription exists or not
        try:
            if account:
                remove_user(account.gcp_email or account.email)
            else:
                remove_user(event.customer.email)
        except Exception as e:
            logger.error(e)


@webhooks.handler("customer.subscription.updated")
def subscription_updated(event: Event, **kwargs):
    """Handle subscription status update"""
    handle_subscription(event)


@webhooks.handler("customer.subscription.created")
def subscribe(event: Event, **kwargs):
    """Add customer to allowed google groups"""
    handle_subscription(event)


@webhooks.handler("customer.subscription.deleted")
def unsubscribe(event: Event, **kwargs):
    """Remove customer from allowed google groups"""
    if subscription := get_subscription(event):
        logger.info(f"Removendo a inscrição do cliente {event.customer.email}")
        subscription.is_active = False
        subscription.save()

    account = Account.objects.filter(email=event.customer.email).first()
    # Remove user from google group if subscription exists or not
    try:
        if account:
            remove_user(account.gcp_email or account.email)
        else:
            remove_user(event.customer.email)
    except Exception as e:
        logger.error(e)


@webhooks.handler("customer.subscription.paused")
def pause_subscription(event: Event, **kwargs):
    """Pause customer subscription"""
    account = Account.objects.filter(email=event.customer.email).first()

    if subscription := get_subscription(event):
        logger.info(f"Pausando a inscrição do cliente {event.customer.email}")
        subscription.is_active = False
        subscription.save()

    try:
        if account:
            remove_user(account.gcp_email or account.email)
        else:
            remove_user(event.customer.email)
    except Exception as e:
        logger.error(e)


@webhooks.handler("customer.subscription.resumed")
def resume_subscription(event: Event, **kwargs):
    """Resume customer subscription"""
    account = Account.objects.filter(email=event.customer.email).first()

    if subscription := get_subscription(event):
        logger.info(f"Resumindo a inscrição do cliente {event.customer.email}")
        subscription.is_active = True
        subscription.save()

    try:
        if account:
            add_user(account.gcp_email or account.email)
        else:
            add_user(event.customer.email)
    except Exception as e:
        logger.error(e)


@webhooks.handler("setup_intent.succeeded")
def setup_intent_succeeded(event: Event, **kwargs):
    """Update customer default payment method and subscribe to plan with trial"""
    logger.info(f"Setup intent updated {event.customer.email}")

    customer = event.customer
    setup_intent = event.data["object"]
    metadata = setup_intent.get("metadata")
    price_id = metadata.get("price_id")
    promotion_code = metadata.get("promotion_code")
    backend_url = metadata.get("backend_url")

    if not backend_url == get_backend_url():
        return logger.info(f"Ignore setup intent from {backend_url}")

    StripeCustomer.modify(
        customer.id,
        invoice_settings={"default_payment_method": setup_intent.get("payment_method")},
    )

    subscriptions = StripeSubscription.list(customer=customer.id)
    has_subscription = len(subscriptions.get("data")) > 0

    if promotion_code:
        discounts = [{"promotion_code": promotion_code}]
    else:
        discounts = []

    if not has_subscription and price_id:
        logger.info(f"Add subscription to user {event.customer.email}")
        customer.subscribe(price=price_id, trial_period_days=7, discounts=discounts)


# Reference
# https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes
# https://developers.google.com/admin-sdk/reseller/v1/support/directory_api_common_errors



================================================
FILE: backend/apps/account_payment/migrations/__init__.py
================================================



================================================
FILE: backend/apps/api/__init__.py
================================================



================================================
FILE: backend/apps/api/v1/__init__.py
================================================



================================================
FILE: backend/apps/api/v1/admin.py
================================================
# -*- coding: utf-8 -*-
from time import sleep

from django import forms
from django.contrib import admin, messages
from django.contrib.admin import ModelAdmin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User
from django.core.management import call_command
from django.db.models.query import QuerySet
from django.http import HttpRequest
from django.shortcuts import render
from django.urls import reverse
from django.utils.html import format_html
from django.utils.safestring import mark_safe
from django_admin_inline_paginator_plus.admin import StackedInlinePaginated
from modeltranslation.admin import TabbedTranslationAdmin, TranslationStackedInline
from ordered_model.admin import OrderedInlineModelAdminMixin, OrderedStackedInline

from backend.apps.api.v1.filters import (
    AreaAdministrativeLevelFilter,
    AreaParentFilter,
    OrganizationImageListFilter,
)
from backend.apps.api.v1.forms import (
    ColumnInlineForm,
    ColumnOriginalNameInlineForm,
    CoverageInlineForm,
    MeasurementUnitInlineForm,
    ObservationLevelInlineForm,
    PollInlineForm,
    ReorderColumnsForm,
    ReorderObservationLevelsForm,
    ReorderTablesForm,
    TableForm,
    TableInlineForm,
    UpdateInlineForm,
)
from backend.apps.api.v1.models import (
    Analysis,
    AnalysisType,
    Area,
    Availability,
    BigQueryType,
    CloudTable,
    Column,
    ColumnOriginalName,
    Coverage,
    Dataset,
    DateTimeRange,
    Dictionary,
    Entity,
    EntityCategory,
    InformationRequest,
    Key,
    Language,
    License,
    MeasurementUnit,
    MeasurementUnitCategory,
    ObservationLevel,
    Organization,
    Pipeline,
    Poll,
    QualityCheck,
    RawDataSource,
    Status,
    Table,
    TableNeighbor,
    Tag,
    Theme,
    Update,
)
from backend.apps.api.v1.tasks import (
    rebuild_search_index_task,
    update_page_views_task,
    update_search_index_task,
    update_table_metadata_task,
    update_table_neighbors_task,
)
from backend.custom.client import get_gbq_client

################################################################################
# Model Admins Inlines
################################################################################


class OrderedTranslatedInline(OrderedStackedInline, TranslationStackedInline):
    pass


class MeasurementUnitInline(OrderedTranslatedInline):
    model = MeasurementUnit
    form = MeasurementUnitInlineForm
    extra = 0
    show_change_link = True


class ColumnInline(OrderedStackedInline, StackedInlinePaginated):
    model = Column
    form = ColumnInlineForm
    extra = 0
    show_change_link = True
    show_full_result_count = True

    per_page = 20

    fields = ColumnInlineForm.Meta.fields + [
        "order",
        "move_up_down_links",
    ]

    readonly_fields = [
        "order",
        "move_up_down_links",
    ]
    autocomplete_fields = [
        "directory_primary_key",
    ]
    ordering = [
        "order",
    ]

    def get_formset(self, request, obj=None, **kwargs):
        """Get formset, and save the current object"""
        self.current_obj = obj
        return super().get_formset(request, obj, **kwargs)

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """Limit the observation level queryset to the current object"""
        if db_field.name == "observation_level":
            kwargs["queryset"] = ObservationLevel.objects.filter(table=self.current_obj)
        return super().formfield_for_foreignkey(db_field, request, **kwargs)


class ColumnOriginalNameInline(TranslationStackedInline):
    model = ColumnOriginalName
    form = ColumnOriginalNameInlineForm
    extra = 0
    fields = [
        "id",
        "name",
    ]


class CloudTableInline(admin.TabularInline):
    model = CloudTable
    extra = 0
    can_delete = False
    show_change_link = True
    readonly_fields = [
        "gcp_project_id",
        "gcp_dataset_id",
        "gcp_table_id",
    ]
    fields = readonly_fields
    template = "admin/cloud_table_inline.html"

    def has_add_permission(self, request, obj=None):
        return False

    def has_change_permission(self, request, obj=None):
        return False


class ObservationLevelInline(OrderedStackedInline):
    model = ObservationLevel
    form = ObservationLevelInlineForm
    extra = 0
    show_change_link = True
    readonly_fields = [
        "entity",
        "order",
        "move_up_down_links",
    ]
    fields = readonly_fields
    template = "admin/observation_level_inline.html"
    ordering = ["order"]

    def get_formset(self, request, obj=None, **kwargs):
        self.parent_obj = obj
        return super().get_formset(request, obj, **kwargs)

    def get_ordering_prefix(self):
        """Return the appropriate ordering prefix based on parent model"""
        if isinstance(self.parent_obj, Table):
            return "table"
        elif isinstance(self.parent_obj, RawDataSource):
            return "rawdatasource"
        elif isinstance(self.parent_obj, InformationRequest):
            return "informationrequest"
        elif isinstance(self.parent_obj, Analysis):
            return "analysis"
        return super().get_ordering_prefix()

    def has_add_permission(self, request, obj=None):
        return False

    def has_change_permission(self, request, obj=None):
        return False


class TableInline(OrderedStackedInline, StackedInlinePaginated):
    model = Table
    form = TableInlineForm
    extra = 0
    per_page = 5
    show_change_link = True
    fields = [
        "order",
        "move_up_down_links",
    ] + TableInlineForm.Meta.fields
    readonly_fields = [
        "order",
        "move_up_down_links",
    ]
    ordering = [
        "order",
    ]


class RawDataSourceInline(OrderedTranslatedInline):
    model = RawDataSource
    extra = 0
    show_change_link = True
    fields = [
        "order",
        "move_up_down_links",
        "id",
        "name",
        "description",
        "availability",
        "url",
    ]
    readonly_fields = [
        "order",
        "move_up_down_links",
    ]
    ordering = [
        "order",
    ]


class InformationRequestInline(OrderedTranslatedInline):
    model = InformationRequest
    extra = 0
    show_change_link = True
    fields = [
        "order",
        "move_up_down_links",
        "id",
        "origin",
        "number",
        "url",
    ]
    readonly_fields = [
        "order",
        "move_up_down_links",
    ]
    ordering = [
        "order",
    ]


class DateTimeRangeInline(admin.StackedInline):
    model = DateTimeRange
    extra = 0
    show_change_link = True
    fields = [
        "units",
    ]


class CoverageInline(admin.StackedInline):
    model = Coverage
    form = CoverageInlineForm
    extra = 0
    show_change_link = True
    readonly_fields = ["datetime_ranges"]

    def datetime_ranges(self, cov):
        """Show datetime ranges in coverage inline"""
        return [str(dt) for dt in cov.datetime_ranges.all()]


class UpdateInline(admin.StackedInline):
    model = Update
    form = UpdateInlineForm
    extra = 0
    fields = [
        "id",
        "entity",
        "lag",
        "latest",
        "frequency",
    ]
    autocomplete_fields = [
        "entity",
    ]


class PollInline(admin.StackedInline):
    model = Poll
    form = PollInlineForm
    extra = 0
    fields = [
        "id",
        "entity",
        "frequency",
        "latest",
        "pipeline",
    ]
    autocomplete_fields = [
        "entity",
        "pipeline",
    ]


################################################################################
# Model Admins Actions
################################################################################


def update_search_index(modeladmin, request, queryset):
    update_search_index_task()


update_search_index.short_description = "Atualizar index de busca"


def rebuild_search_index(modeladmin, request, queryset):
    rebuild_search_index_task()


rebuild_search_index.short_description = "Reconstruir index de busca"


def update_table_metadata(modeladmin: ModelAdmin, request: HttpRequest, queryset: QuerySet):
    """Update the metadata of selected tables in the admin"""
    if str(modeladmin) == "v1.TableAdmin":
        tables = queryset.all()
    if str(modeladmin) == "v1.DatasetAdmin":
        tables = Table.objects.filter(dataset__in=queryset).all()

    update_table_metadata_task([t.pk for t in tables])


update_table_metadata.short_description = "Atualizar metadados das tabelas"


def update_table_neighbors(modeladmin: ModelAdmin, request: HttpRequest, queryset: QuerySet):
    """Update all table neighbors"""
    update_table_neighbors_task()


update_table_neighbors.short_description = "Atualizar os vizinhos das tabelas"


def update_page_views(modeladmin: ModelAdmin, request: HttpRequest, queryset: QuerySet):
    """Update the page views counter of all datasets and tables"""
    update_page_views_task()


update_page_views.short_description = "Atualizar metadados de visualizações"


def reorder_tables(modeladmin, request, queryset):
    """Reorder tables in respect to dataset"""

    if queryset.count() != 1:
        message = "Você só pode selecionar um conjunto de dados por vez"
        messages.error(request, message)
        return

    if "do_action" in request.POST:
        form = ReorderTablesForm(request.POST)
        if form.is_valid():
            ordered_slugs = form.cleaned_data["ordered_slugs"].split()
            for dataset in queryset:
                call_command("reorder_tables", dataset.id, *ordered_slugs)
            messages.success(request, "Tabelas reordenadas com sucesso")
    else:
        form = ReorderTablesForm()
        dataset = queryset.first()
        tables = dataset.tables.all()
        return render(
            request,
            "admin/reorder_tables.html",
            {
                "title": "Editar ordem das tabelas",
                "form": form,
                "tables": tables,
                "dataset": dataset,
            },
        )


reorder_tables.short_description = "Editar ordem das tabelas"


def reset_table_order(modeladmin, request, queryset):
    """Reset table order in respect to dataset"""

    if queryset.count() != 1:
        message = "Você só pode selecionar um conjunto de dados por vez"
        messages.error(request, message)
        return

    dataset = queryset.first()
    for i, table in enumerate(dataset.tables.order_by("name").all()):
        table.order = i
        table.save()


reset_table_order.short_description = "Reiniciar ordem das tabelas"


def reorder_columns(modeladmin, request, queryset):
    """Reorder columns in respect to table"""

    if "do_action" in request.POST:
        form = ReorderColumnsForm(request.POST)
        if form.is_valid():
            for table in queryset:
                if form.cleaned_data["use_database_order"]:
                    cloud_table = CloudTable.objects.get(table=table)
                    cloud_table_slug = f"{cloud_table.gcp_project_id}.{cloud_table.gcp_dataset_id}"
                    query = f"""
                        SELECT column_name
                        FROM {cloud_table_slug}.INFORMATION_SCHEMA.COLUMNS
                        WHERE table_name = '{cloud_table.gcp_table_id}'
                    """
                    try:
                        client = get_gbq_client()
                        query_job = client.query(query, timeout=90)
                    except Exception as e:
                        messages.error(
                            request,
                            f"Error while querying BigQuery: {e}",
                        )
                        return
                    ordered_slugs = [row.column_name for row in query_job.result()]
                else:
                    if queryset.count() != 1:
                        messages.error(
                            request,
                            "To pass the names manually you must select only one table.",
                        )
                        return
                    ordered_slugs = form.cleaned_data["ordered_columns"].split()
                try:
                    call_command("reorder_columns", table.id, *ordered_slugs)
                    print(f"Columns reordered successfully for {table}")
                    sleep(1)
                except Exception as e:
                    messages.error(
                        request,
                        f"Error while reordering columns: {e}",
                    )
                    return
            messages.success(request, "Columns reordered successfully")
    else:
        form = ReorderColumnsForm()
        return render(
            request,
            "admin/reorder_columns.html",
            {"title": "Reorder columns", "tables": queryset, "form": form},
        )


reorder_columns.short_description = "Alterar ordem das colunas"


def reset_column_order(modeladmin, request, queryset):
    """Reset column order in respect to dataset"""

    if queryset.count() != 1:
        message = "Você só pode selecionar um conjunto de dados por vez"
        messages.error(request, message)
        return

    tables = queryset.first()
    tables = tables.columns.order_by("name").all()
    for i, table in enumerate(tables):
        table.order = i
        table.save()


reset_column_order.short_description = "Reiniciar ordem das colunas"


def reorder_observation_levels(modeladmin, request, queryset):
    """Reorder observation levels in respect to parent"""
    if "do_action" in request.POST:
        form = ReorderObservationLevelsForm(request.POST)
        if form.is_valid():
            if queryset.count() != 1:
                messages.error(
                    request,
                    "To pass the names manually you must select only one parent.",
                )
                return

            parent = queryset.first()
            ordered_entities = form.cleaned_data["ordered_entities"].split()

            # Get observation levels for this parent
            if hasattr(parent, "observation_levels"):
                obs_levels = parent.observation_levels.all()

                # Create a mapping of entity names to observation levels
                obs_by_entity = {ol.entity.name: ol for ol in obs_levels}

                # Update order based on provided entity names
                for i, entity_name in enumerate(ordered_entities):
                    if entity_name in obs_by_entity:
                        obs_by_entity[entity_name].order = i
                        obs_by_entity[entity_name].save()

                messages.success(request, "Observation levels reordered successfully")
            else:
                messages.error(request, "Selected object has no observation levels")
    else:
        form = ReorderObservationLevelsForm()
        return render(
            request,
            "admin/reorder_observation_levels.html",
            {"title": "Reorder observation levels", "parents": queryset, "form": form},
        )


reorder_observation_levels.short_description = "Alterar ordem dos níveis de observação"


################################################################################
# Model Admins
################################################################################


class AreaAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "slug",
        "administrative_level",
        "parent",
    ]
    search_fields = [
        "name",
        "slug",
    ]
    list_filter = [
        AreaAdministrativeLevelFilter,
        AreaParentFilter,
    ]
    autocomplete_fields = [
        "parent",
        "entity",
    ]


class OrganizationAdmin(TabbedTranslationAdmin):
    readonly_fields = ["id", "full_slug", "created_at", "updated_at"]
    list_display = ["name", "full_slug", "has_picture"]
    search_fields = ["name", "slug"]
    list_filter = [OrganizationImageListFilter, "created_at", "updated_at"]
    autocomplete_fields = [
        "area",
    ]


class ThemeAdmin(TabbedTranslationAdmin):
    readonly_fields = ["id", "created_at", "updated_at"]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class TagAdmin(TabbedTranslationAdmin):
    readonly_fields = ["id", "created_at", "updated_at"]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class DatasetAdmin(OrderedInlineModelAdminMixin, TabbedTranslationAdmin):
    actions = [
        reorder_tables,
        reset_table_order,
        update_table_metadata,
        update_page_views,
        update_search_index,
        rebuild_search_index,
    ]
    inlines = [
        TableInline,
        RawDataSourceInline,
        InformationRequestInline,
    ]
    readonly_fields = [
        "id",
        "full_slug",
        "spatial_coverage",
        "temporal_coverage",
        "page_views",
        "created_at",
        "updated_at",
    ]
    search_fields = ["name", "slug", "organizations__name"]
    filter_horizontal = [
        "tags",
        "themes",
        "organizations",
    ]
    list_display = [
        "name",
        "get_organizations",
        "temporal_coverage",
        "related_tables",
        "related_raw_data_sources",
        "updated_at",
    ]
    ordering = ["-updated_at"]

    def get_organizations(self, obj):
        """Display all organizations for the dataset"""
        return ", ".join([org.name for org in obj.organizations.all()])

    get_organizations.short_description = "Organizations"

    def related_tables(self, obj):
        return format_html(
            "<a class='related-widget-wrapper-link add-related' "
            "href='/admin/v1/table/add/?dataset={0}&_to_field=id&_popup=1'>{1} {2}</a>",
            obj.id,
            obj.tables.count(),
            "tables" if obj.tables.count() > 1 else "table",
        )

    related_tables.short_description = "Tables"

    def related_raw_data_sources(self, obj):
        return format_html(
            "<a class='related-widget-wrapper-link add-related' "
            "href='/admin/v1/table/add/?dataset={0}&_to_field=id&_popup=1'>{1} {2}</a>",
            obj.id,
            obj.raw_data_sources.count(),
            "sources" if obj.raw_data_sources.count() > 1 else "sources",
        )

    related_raw_data_sources.short_description = "Sources"


class CustomUserAdmin(UserAdmin):
    search_fields = ["username", "first_name", "last_name", "email"]


if User in admin.site._registry:
    admin.site.unregister(User)
admin.site.register(User, CustomUserAdmin)


class TableAdmin(OrderedInlineModelAdminMixin, TabbedTranslationAdmin):
    form = TableForm
    fieldsets = (
        (
            None,
            {
                "fields": (
                    "dataset",
                    "get_table_url",
                    "status",
                    "name",
                    "slug",
                    "description",
                    "get_datetime_ranges_display",
                    "number_columns",
                    "number_rows",
                    "get_update_display",
                    "raw_data_source",
                    "published_by",
                    "data_cleaned_by",
                    "auxiliary_files_url",
                    "created_at",
                    "updated_at",
                )
            },
        ),
    )
    actions = [
        reorder_columns,
        reset_column_order,
        reorder_observation_levels,
        update_table_metadata,
        update_table_neighbors,
        update_page_views,
    ]
    inlines = [
        ColumnInline,
        CoverageInline,
        CloudTableInline,
        ObservationLevelInline,
        UpdateInline,
    ]
    readonly_fields = [
        "get_table_url",
        "get_datetime_ranges_display",
        "partitions",
        "created_at",
        "updated_at",
        "spatial_coverage",
        "full_temporal_coverage",
        "coverage_datetime_units",
        "number_rows",
        "number_columns",
        "uncompressed_file_size",
        "compressed_file_size",
        "page_views",
        "get_update_display",
    ]
    search_fields = [
        "name",
        "dataset__name",
    ]
    autocomplete_fields = [
        "dataset",
        "published_by",
        "data_cleaned_by",
    ]
    filter_horizontal = [
        "raw_data_source",
    ]
    list_display = [
        "name",
        "dataset",
        "created_at",
        "updated_at",
    ]
    ordering = ["-updated_at"]

    def get_queryset(self, request):
        """Optimize queryset by prefetching related objects"""
        return super().get_queryset(request).prefetch_related("published_by", "data_cleaned_by")

    def get_publishers(self, obj):
        """Display all publishers for the table"""
        # Convert to list to avoid multiple DB hits
        publishers = list(obj.published_by.all())
        return ", ".join(f"{pub.first_name} {pub.last_name}" for pub in publishers)

    get_publishers.short_description = "Publishers"

    def get_data_cleaners(self, obj):
        """Display all data cleaners for the table"""
        # Convert to list to avoid multiple DB hits
        cleaners = list(obj.data_cleaned_by.all())
        return ", ".join(f"{cleaner.first_name} {cleaner.last_name}" for cleaner in cleaners)

    get_data_cleaners.short_description = "Data Cleaners"

    def get_table_url(self, obj):
        """Get the clickable URL for the table"""
        website_url = f"https://basedosdados.org/dataset/{obj.dataset.id}?table={obj.id}"
        website_html = format_html(
            '<a href="{}" target="_blank">🖥️ Ver tabela no site</a>', website_url
        )

        cloud_tables = obj.cloud_tables.all()

        if len(cloud_tables) == 0:
            add_cloud_table_url = reverse("admin:v1_cloudtable_add") + f"?table={obj.id}"
            gcp_html = format_html(
                'No cloud table found. <a href="{}">Create here</a>', add_cloud_table_url
            )

        elif len(cloud_tables) > 1:
            cloud_table_tab = reverse("admin:v1_table_change") + "/#cloud-tables-tab"
            gcp_html = format_html(
                'More than 1 cloud table found. <a href="{}">Fix it here</a>', cloud_table_tab
            )

        else:
            cloud_table = cloud_tables[0]
            gcp_dev_url = f"https://console.cloud.google.com/bigquery?p=basedosdados-dev&d={cloud_table.gcp_dataset_id}&t={cloud_table.gcp_table_id}&page=table"
            gcp_prod_url = f"https://console.cloud.google.com/bigquery?p=basedosdados&d={cloud_table.gcp_dataset_id}&t={cloud_table.gcp_table_id}&page=table"

            # Gerando o HTML
            gcp_html = format_html(
                '<a href="{}" target="_blank">🧩 Ver tabela em BigQuery-dev</a><br>'
                '<a href="{}" target="_blank">🧊 Ver tabela em BigQuery-prod</a>',
                gcp_dev_url,
                gcp_prod_url,
            )

        return format_html("{}<br>{}", website_html, gcp_html)

    get_table_url.short_description = "Table URLs"

    def get_datetime_ranges_display(self, obj):
        """Display datetime ranges with links to their admin pages"""
        coverages = list(obj.coverages.all())
        links = []

        if len(coverages) == 0:
            add_coverage_url = reverse("admin:v1_coverage_add") + f"?table={obj.id}"
            return format_html("No coverages found. <a href='{}'>Create here</a>", add_coverage_url)

        for cov in coverages:
            url_coverage = cov.admin_url
            add_date_time_range_url = reverse("admin:v1_datetimerange_add") + f"?coverage={cov.id}"
            status = "Closed" if cov.is_closed else "Open"

            if cov.datetime_ranges.count() == 0:
                links.append(
                    format_html(
                        "⚠️ <a href='{}'>{} coverage</a> found, but no Datetime Range."
                        "<a href='{}'>Create here</a>",
                        add_date_time_range_url,
                        status,
                        add_date_time_range_url,
                    )
                )

            ranges = sorted(cov.datetime_ranges.all(), key=lambda dt: str(dt))
            for dt_range in ranges:
                url_dt_range = reverse("admin:v1_datetimerange_change", args=[dt_range.id])
                links.append(
                    format_html(
                        '<a href="{}">{}</a> -  <a href="{}">{} coverage</a>',
                        url_dt_range,
                        str(dt_range),
                        url_coverage,
                        status,
                    )
                )

        return format_html("<br>".join(links))

    get_datetime_ranges_display.short_description = "DateTime Ranges"

    def get_update_display(self, table_obj):
        """Display update info"""

        def check_if_there_is_only_one_object_connected(attr_label, connection_obj):
            campos = [f.name for f in connection_obj._meta.get_fields()]

            if attr_label not in campos:
                return format_html(
                    "The {} label was not found in {} model",
                    attr_label,
                    connection_obj._meta.verbose_name,
                )

            obj_list = getattr(connection_obj, attr_label).all()
            change_url = connection_obj.admin_url + "#" + attr_label + "-tab"

            # Se não houver objetos
            if len(obj_list) == 0:
                return format_html(
                    "No {} found in {}. <a href='{}'>Create one</a>",
                    attr_label,
                    connection_obj._meta.verbose_name,
                    change_url,
                )

            # Se houver mais de 1 objeto
            elif len(obj_list) > 1:
                return format_html(
                    "More than 1 {} found in {}. <a href='{}'>Fix it</a>",
                    obj_list[0]._meta.verbose_name,
                    connection_obj._meta.verbose_name,
                    change_url,
                )

            # Se houver exatamente 1 objeto
            else:
                selected_obj = obj_list[0]
                html = format_html(
                    "<a href='{}'>{}</a> {} found in <a href='{}'>{}</a> ",
                    selected_obj.admin_url,
                    str(selected_obj),
                    selected_obj._meta.verbose_name,
                    change_url,
                    connection_obj._meta.verbose_name,
                )
                return html

        def check_if_there_is_only_one_raw_data_source_connected(table_object):
            """Specific function to check Raw Data Source
            the instructions and conditionals are different from updates and polls"""
            raw_data_source_obj_list = getattr(table_object, "raw_data_source").all()
            if len(raw_data_source_obj_list) == 0:
                return None, format_html("No Raw Data Source found. Add one in the box bellow")

            elif len(raw_data_source_obj_list) > 1:
                return None, format_html("More than 1 Raw Data Source found. Fix in the box bellow")

            else:
                selected_obj = raw_data_source_obj_list[0]
                html = format_html(
                    "<a href='{}'>Raw Data Source</a> found",
                    selected_obj.admin_url,
                    str(selected_obj),
                )
                return raw_data_source_obj_list[0], html

        update_html = check_if_there_is_only_one_object_connected("updates", table_obj)

        (
            raw_data_source_obj,
            raw_data_source_html,
        ) = check_if_there_is_only_one_raw_data_source_connected(table_obj)

        if raw_data_source_obj:
            raw_data_source_update_html = check_if_there_is_only_one_object_connected(
                "updates", raw_data_source_obj
            )
            print(f"{raw_data_source_update_html = }")
            poll_raw_data_source_html = check_if_there_is_only_one_object_connected(
                "polls", raw_data_source_obj
            )

            raw_data_source_html = format_html(
                raw_data_source_update_html + "<br>" + poll_raw_data_source_html
            )

        return format_html(update_html + "<br>" + raw_data_source_html)

    get_update_display.short_description = "Update and Poll Info"


class TableNeighborAdmin(admin.ModelAdmin):
    search_fields = [
        "table_a__name",
        "table_b__name",
    ]
    list_filter = [
        "table_a",
        "table_b",
    ]
    list_display = [
        "table_a",
        "table_b",
        "similarity",
        "similarity_of_area",
        "similarity_of_datetime",
        "similarity_of_directory",
    ]
    ordering = ["table_a", "table_b"]


class MeasurementUnitCategoryAdmin(TabbedTranslationAdmin):
    list_display = [
        "slug",
        "name",
    ]
    search_fields = [
        "slug",
        "name",
    ]


class MeasurementUnitAdmin(TabbedTranslationAdmin):
    list_display = [
        "slug",
        "name",
        "tex",
        "category",
    ]
    search_fields = [
        "slug",
        "name",
        "tex",
        "category__name",
    ]
    list_filter = [
        "category",
    ]


class ColumnForm(forms.ModelForm):
    class Meta:
        model = Column
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["directory_primary_key"].queryset = Column.objects.filter(
            table__is_directory=True
        )


class ColumnAdmin(TabbedTranslationAdmin):
    form = ColumnForm
    list_display = [
        "__str__",
        "table",
    ]
    list_filter = [
        "table__dataset__organizations__name",
    ]
    autocomplete_fields = [
        "table",
        "observation_level",
    ]
    readonly_fields = [
        "id",
        "order",
        "spatial_coverage",
        "temporal_coverage",
    ]
    search_fields = ["name", "table__name"]
    inlines = [
        CoverageInline,
        ColumnOriginalNameInline,
    ]


class ColumnOriginalNameAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "__str__",
    ]
    fields = [
        "id",
        "name",
        "column",
    ]
    inlines = [CoverageInline]


def reset_observation_level_order(modeladmin, request, queryset):
    """Reset observation level order in respect to parent"""
    # Group observation levels by their parent
    by_table = {}
    by_raw_data_source = {}
    by_information_request = {}
    by_analysis = {}

    for obs in queryset:
        if obs.table_id:
            by_table.setdefault(obs.table_id, []).append(obs)
        elif obs.raw_data_source_id:
            by_raw_data_source.setdefault(obs.raw_data_source_id, []).append(obs)
        elif obs.information_request_id:
            by_information_request.setdefault(obs.information_request_id, []).append(obs)
        elif obs.analysis_id:
            by_analysis.setdefault(obs.analysis_id, []).append(obs)

    # Reset order within each parent group
    for parent_levels in [by_table, by_raw_data_source, by_information_request, by_analysis]:
        for levels in parent_levels.values():
            sorted_levels = sorted(levels, key=lambda x: x.entity.name)
            for i, obs_level in enumerate(sorted_levels):
                obs_level.order = i
                obs_level.save()


reset_observation_level_order.short_description = "Reiniciar ordem dos níveis de observação"


class ObservationLevelAdmin(admin.ModelAdmin):
    actions = [reset_observation_level_order]
    readonly_fields = [
        "id",
    ]
    search_fields = [
        "table__name",
        "entity__name",
        "raw_data_source__name",
        "information_request__dataset__name",
    ]
    autocomplete_fields = [
        "entity",
        "table",
        "raw_data_source",
        "information_request",
    ]
    list_filter = [
        "entity__category__name",
        "table",
        "raw_data_source",
        "information_request",
    ]
    list_display = [
        "__str__",
        "table",
        "raw_data_source",
        "information_request",
    ]


class RawDataSourceAdmin(OrderedInlineModelAdminMixin, TabbedTranslationAdmin):
    actions = [
        reorder_observation_levels,
    ]
    list_display = ["name", "dataset", "created_at", "updated_at"]
    search_fields = ["name", "dataset__name"]
    readonly_fields = ["id", "created_at", "updated_at"]
    autocomplete_fields = [
        "dataset",
        "languages",
    ]
    filter_horizontal = [
        "languages",
        "area_ip_address_required",
    ]
    inlines = [
        CoverageInline,
        UpdateInline,
        ObservationLevelInline,
        PollInline,
    ]


class InformationRequestAdmin(OrderedInlineModelAdminMixin, TabbedTranslationAdmin):
    actions = [
        reorder_observation_levels,
    ]
    list_display = ["__str__", "dataset", "created_at", "updated_at"]
    search_fields = ["__str__", "dataset__name"]
    readonly_fields = ["id", "created_at", "updated_at"]
    autocomplete_fields = ["dataset"]
    inlines = [
        CoverageInline,
        ObservationLevelInline,
        PollInline,
    ]


class CoverageTypeAdminFilter(admin.SimpleListFilter):
    title = "coverage_type"
    parameter_name = "coverage_type"

    def lookups(self, request, model_admin):
        return (
            ("table", "Table"),
            ("column", "Column"),
            ("raw_data_source", "Raw Data Source"),
            ("information_request", "Information Request"),
            ("key", "Key"),
        )

    def queryset(self, request, queryset):
        if self.value() == "table":
            return queryset.filter(table__isnull=False)
        if self.value() == "column":
            return queryset.filter(column__isnull=False)
        if self.value() == "raw_data_source":
            return queryset.filter(raw_data_source__isnull=False)
        if self.value() == "information_request":
            return queryset.filter(information_request__isnull=False)
        if self.value() == "key":
            return queryset.filter(key__isnull=False)


class UnitsInline(admin.TabularInline):
    model = DateTimeRange.units.through
    extra = 0
    fields = ["column"]
    raw_id_fields = ["column"]
    verbose_name = "Unit"
    verbose_name_plural = "Units"


class DateTimeRangeAdmin(admin.ModelAdmin):
    list_display = ["__str__", "coverage"]
    readonly_fields = ["id"]
    autocomplete_fields = [
        "coverage",
    ]
    exclude = [
        "start_quarter",
        "start_semester",
        "start_hour",
        "start_minute",
        "start_second",
        "end_quarter",
        "end_semester",
        "end_hour",
        "end_minute",
        "end_second",
        "units",
    ]

    inlines = [UnitsInline]
    raw_id_fields = ["coverage"]


class CoverageAdmin(admin.ModelAdmin):
    readonly_fields = ["id", "datetime_ranges_display"]
    list_display = [
        "area",
        "coverage_type",
        "table",
        "column",
        "raw_data_source",
        "information_request",
    ]
    list_filter = [
        CoverageTypeAdminFilter,
    ]
    autocomplete_fields = [
        "table",
        "raw_data_source",
        "information_request",
        "column",
    ]
    search_fields = [
        "table__name",
        "raw_data_source__name",
        "information_request__dataset__name",
        "column__name",
    ]

    def datetime_ranges_display(self, obj):
        """Display datetime ranges with links to their admin pages"""
        ranges = obj.datetime_ranges.all()
        links = []
        for dt_range in ranges:
            url = reverse("admin:v1_datetimerange_change", args=[dt_range.id])
            links.append(format_html('<a href="{}">{}</a>', url, str(dt_range)))

        # Add link to add new datetime range
        add_url = reverse("admin:v1_datetimerange_add") + f"?coverage={obj.id}"
        links.append(mark_safe(f'<a class="addlink" href="{add_url}">Add DateTime Range</a>'))

        return mark_safe("<br>".join(links))

    datetime_ranges_display.short_description = "DateTime Ranges"

    def get_queryset(self, request):
        """Optimize queryset by prefetching related objects"""
        qs = (
            super()
            .get_queryset(request)
            .select_related("table", "column", "raw_data_source", "information_request", "area")
        )
        # Add prefetch for datetime_ranges and their units
        return qs.prefetch_related("datetime_ranges", "datetime_ranges__units")


class EntityCategoryAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class EntityAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "category",
    ]
    search_fields = ["name", "category__name"]
    list_filter = [
        "category",
    ]
    autocomplete_fields = [
        "category",
    ]


class LanguageAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class UpdateAdmin(admin.ModelAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "__str__",
    ]
    search_fields = [
        "entity",
        "table",
        "raw_data_source",
        "information_request",
        "column",
    ]
    autocomplete_fields = [
        "entity",
        "table",
        "raw_data_source",
        "information_request",
    ]


class LicenseAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class AvailabilityAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class CloudTableAdmin(admin.ModelAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "__str__",
    ]
    search_fields = [
        "gcp_project_id",
        "gcp_dataset_id",
        "gcp_table_id",
    ]
    autocomplete_fields = ["table", "columns"]
    filter_horizontal = [
        "columns",
    ]
    fields = [
        "table",
        "gcp_project_id",
        "gcp_dataset_id",
        "gcp_table_id",
        "columns",
    ]
    readonly_fields = [
        "id",
    ]


class StatusAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class AnalysisTypeAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "slug",
    ]
    search_fields = [
        "name",
        "slug",
    ]


class AnalysisAdmin(TabbedTranslationAdmin):
    actions = [
        reorder_observation_levels,
    ]
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "analysis_type",
    ]
    search_fields = [
        "name",
        "description",
    ]
    autocomplete_fields = ["analysis_type", "datasets", "themes", "tags"]
    filter_horizontal = ["datasets", "themes", "tags"]


class KeyAdmin(admin.ModelAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "value",
    ]
    search_fields = [
        "name",
        "value",
    ]
    inlines = [CoverageInline]


class QualityCheckAdmin(TabbedTranslationAdmin):
    readonly_fields = [
        "id",
    ]
    list_display = [
        "name",
        "analysis",
        "dataset",
        "passed",
    ]
    search_fields = [
        "name",
        "description",
    ]
    autocomplete_fields = [
        "analysis",
        "dataset",
        "table",
        "column",
        "key",
        "raw_data_source",
        "information_request",
    ]


class PollAdmin(admin.ModelAdmin):
    readonly_fields = [
        "id",
    ]
    search_fields = [
        "entity__name",
        "raw_data_source__name",
        "information_request__dataset__name",
    ]
    autocomplete_fields = [
        "entity",
        "pipeline",
        "raw_data_source",
        "information_request",
    ]
    list_filter = [
        "entity__category__name",
    ]
    list_display = [
        "__str__",
        "raw_data_source",
        "information_request",
    ]


class PipelineAdmin(admin.ModelAdmin):
    readonly_fields = [
        "id",
    ]
    search_fields = [
        "id",
        "github_url",
    ]
    list_display = [
        "id",
        "github_url",
    ]


admin.site.register(Analysis, AnalysisAdmin)
admin.site.register(AnalysisType, AnalysisTypeAdmin)
admin.site.register(Area, AreaAdmin)
admin.site.register(Availability, AvailabilityAdmin)
admin.site.register(BigQueryType)
admin.site.register(CloudTable, CloudTableAdmin)
admin.site.register(Column, ColumnAdmin)
admin.site.register(ColumnOriginalName, ColumnOriginalNameAdmin)
admin.site.register(Coverage, CoverageAdmin)
admin.site.register(Dataset, DatasetAdmin)
admin.site.register(DateTimeRange, DateTimeRangeAdmin)
admin.site.register(Dictionary)
admin.site.register(Entity, EntityAdmin)
admin.site.register(EntityCategory, EntityCategoryAdmin)
admin.site.register(InformationRequest, InformationRequestAdmin)
admin.site.register(Key, KeyAdmin)
admin.site.register(Language, LanguageAdmin)
admin.site.register(License, LicenseAdmin)
admin.site.register(MeasurementUnit, MeasurementUnitAdmin)
admin.site.register(MeasurementUnitCategory, MeasurementUnitCategoryAdmin)
admin.site.register(ObservationLevel, ObservationLevelAdmin)
admin.site.register(Organization, OrganizationAdmin)
admin.site.register(Pipeline, PipelineAdmin)
admin.site.register(RawDataSource, RawDataSourceAdmin)
admin.site.register(Status, StatusAdmin)
admin.site.register(Table, TableAdmin)
admin.site.register(TableNeighbor, TableNeighborAdmin)
admin.site.register(Tag, TagAdmin)
admin.site.register(Theme, ThemeAdmin)
admin.site.register(Update, UpdateAdmin)
admin.site.register(QualityCheck, QualityCheckAdmin)
admin.site.register(Poll, PollAdmin)



================================================
FILE: backend/apps/api/v1/apps.py
================================================
# -*- coding: utf-8 -*-
from django.apps import AppConfig


class ApiConfig(AppConfig):
    name = "backend.apps.api.v1"
    verbose_name = " API"
    default_auto_field = "django.db.models.BigAutoField"



================================================
FILE: backend/apps/api/v1/filters.py
================================================
# -*- coding: utf-8 -*-
from django.contrib import admin
from django.utils.translation import gettext_lazy

from backend.apps.api.v1.models import Area, Coverage, ObservationLevel, Organization


class OrganizationImageListFilter(admin.SimpleListFilter):
    title = "Picture"
    parameter_name = "has_picture"

    def lookups(self, request, model_admin):
        return (
            ("true", "Yes"),
            ("false", "No"),
        )

    def queryset(self, request, queryset):
        if self.value() == "true":
            return queryset.exclude(picture="")
        if self.value() == "false":
            return queryset.filter(picture="")


class DatasetOrganizationListFilter(admin.SimpleListFilter):
    title = "Organization"
    parameter_name = "organization"

    def lookups(self, request, model_admin):
        organizations = Organization.objects.all().order_by("slug")
        return [(org.id, org.name) for org in organizations]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(organizations__id=self.value())
        return queryset


class TableOrganizationListFilter(admin.SimpleListFilter):
    title = "Organization"
    parameter_name = "organization"

    def lookups(self, request, model_admin):
        values = Organization.objects.order_by("name").distinct().values("name", "pk")
        return [(v.get("pk"), v.get("name")) for v in values]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(dataset__organization=self.value())


class TableCoverageListFilter(admin.SimpleListFilter):
    title = "Coverage"
    parameter_name = "table_coverage"

    def lookups(self, request, model_admin):
        values = (
            Coverage.objects.filter(table__id__isnull=False)
            .order_by("area__name")
            .distinct()
            .values("area__name", "area__slug")
        )
        return [(v.get("area__slug"), v.get("area__name")) for v in values]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(coverages__area__slug=self.value())


class TableObservationListFilter(admin.SimpleListFilter):
    title = "Observation Level"
    parameter_name = "table_observation"

    def lookups(self, request, model_admin):
        distinct_values = (
            ObservationLevel.objects.filter(table__id__isnull=False)
            .order_by("entity__name")
            .distinct()
            .values("entity__id", "entity__name")
        )
        return [(value.get("entity__id"), value.get("entity__name")) for value in distinct_values]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(observation_levels__entity=self.value())


class TableDirectoryListFilter(admin.SimpleListFilter):
    title = gettext_lazy("Directory")
    parameter_name = "is_directory"

    def lookups(self, request, model_admin):
        return (
            ("true", gettext_lazy("Yes")),
            ("false", gettext_lazy("No")),
        )

    def queryset(self, request, queryset):
        if self.value() == "true":
            return queryset.filter(is_directory=True)
        if self.value() == "false":
            return queryset.filter(is_directory=False)


class AreaAdministrativeLevelFilter(admin.SimpleListFilter):
    title = "Administrative Level"
    parameter_name = "administrative_level"

    def lookups(self, request, model_admin):
        return [
            (0, "0"),
            (1, "1"),
            (2, "2"),
            (3, "3"),
            (4, "4"),
            (5, "5"),
        ]

    def queryset(self, request, queryset):
        if self.value() is not None:
            return queryset.filter(administrative_level=self.value())


class AreaParentFilter(admin.SimpleListFilter):
    title = "Parent Area"
    parameter_name = "parent"

    def lookups(self, request, model_admin):
        # Get all areas that have children, ordered by name
        parents = Area.objects.filter(children__isnull=False).distinct().order_by("name")
        return [(area.id, f"{area.name}") for area in parents]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(parent_id=self.value())



================================================
FILE: backend/apps/api/v1/graphql.py
================================================
# -*- coding: utf-8 -*-

from graphene import UUID, Boolean, Float, List, ObjectType, String
from graphene_django import DjangoObjectType

from backend.apps.api.v1.models import Table, TableNeighbor
from backend.apps.api.v1.sql_generator import OneBigTableQueryGenerator
from backend.custom.graphql_base import PlainTextNode


class TableNeighborNode(DjangoObjectType):
    """Similiar tables and columns with filters"""

    table_id = String()
    table_name = String()
    dataset_id = String()
    dataset_name = String()
    score = Float()

    class Meta:
        model = TableNeighbor
        fields = ("id",)
        filter_fields = ("id",)
        interfaces = (PlainTextNode,)

    def resolve__table_id(root, info):
        return root.table_b.pk

    def resolve__table_name(root, info):
        return root.table_b.name

    def resolve__dataset_id(root, info):
        return root.table_b.dataset.pk

    def resolve__dataset_name(root, info):
        return root.table_b.dataset.name

    def resolve_score(root, info):
        return root.score


class Query(ObjectType):
    get_table_neighbor = List(
        TableNeighborNode,
        table_id=UUID(required=True),
        theme=String(),
        share_theme=Boolean(),
    )
    get_table_one_big_table_query = String(
        table_id=UUID(required=True),
        columns=List(String),
        include_table_translation=Boolean(),
    )

    def resolve_get_table_neighbor(root, info, table_id, **kwargs):
        return TableNeighbor.objects.filter(table_a__pk=table_id).all()

    def resolve_get_table_one_big_table_query(
        root, info, table_id, columns=None, include_table_translation=True, **kwargs
    ):
        if table := Table.objects.filter(pk=table_id).first():
            sql_query = OneBigTableQueryGenerator().generate(
                table, columns, include_table_translation
            )
            return sql_query



================================================
FILE: backend/apps/api/v1/models.py
================================================
# -*- coding: utf-8 -*-
import logging
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime
from math import log10
from uuid import uuid4

from django.core.exceptions import ValidationError
from django.db import models
from django.utils.functional import cached_property
from ordered_model.models import OrderedModel

from backend.apps.account.models import Account
from backend.custom.model import BaseModel
from backend.custom.storage import OverwriteStorage, upload_to, validate_image
from backend.custom.utils import check_kebab_case, check_snake_case

logger = logging.getLogger("django.request")


class Area(BaseModel):
    """Area model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=True)
    name = models.CharField(max_length=255, blank=False, null=False)
    administrative_level = models.IntegerField(
        null=True,
        blank=True,
        choices=[
            (0, "0"),
            (1, "1"),
            (2, "2"),
            (3, "3"),
            (4, "4"),
            (5, "5"),
        ],
    )
    entity = models.ForeignKey(
        "Entity",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="areas",
        limit_choices_to={"category__slug": "spatial"},
    )
    parent = models.ForeignKey(
        "Area",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="children",
    )

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return f"{str(self.name)} ({str(self.slug)})"

    class Meta:
        """Meta definition for Area."""

        db_table = "area"
        verbose_name = "Area"
        verbose_name_plural = "Areas"
        ordering = ["name"]

    def clean(self):
        """Validate the model fields."""
        errors = {}
        if self.administrative_level is not None and self.administrative_level not in [0, 1, 2, 3]:
            errors["administrative_level"] = "Administrative level must be 0, 1, 2, or 3"

        if self.entity and self.entity.category.slug != "spatial":
            errors["entity"] = 'Entity must have category "spatial"'

        if self.parent and self.parent.slug != "world":
            if self.administrative_level is None:
                errors[
                    "administrative_level"
                ] = "Administrative level is required when parent is set"
            elif self.parent.administrative_level is None:
                errors["parent"] = "Parent must have an administrative level"
            elif self.parent.administrative_level != self.administrative_level - 1:
                errors["parent"] = "Parent must have administrative level exactly one level above"

        if errors:
            raise ValidationError(errors)
        return super().clean()


class Coverage(BaseModel):
    """
    Coverage model
    Spatial and temporal coverage of a table, raw data source, information request, column or key
    """

    id = models.UUIDField(primary_key=True, default=uuid4)
    table = models.ForeignKey(
        "Table",
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="coverages",
    )
    raw_data_source = models.ForeignKey(
        "RawDataSource",
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="coverages",
    )
    information_request = models.ForeignKey(
        "InformationRequest",
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="coverages",
    )
    column = models.ForeignKey(
        "Column",
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="coverages",
    )
    column_original_name = models.ForeignKey(
        "ColumnOriginalName",
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="coverages",
    )
    key = models.ForeignKey(
        "Key",
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="coverages",
    )
    analysis = models.ForeignKey(
        "Analysis",
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="coverages",
    )
    area = models.ForeignKey(
        "Area",
        blank=True,
        null=True,
        on_delete=models.SET_NULL,
        related_name="coverages",
    )
    is_closed = models.BooleanField("Is Closed", default=False)

    graphql_nested_filter_fields_whitelist = ["id"]

    class Meta:
        """Meta definition for Coverage."""

        db_table = "coverage"
        verbose_name = "Coverage"
        verbose_name_plural = "Coverages"
        ordering = ["id"]

    def __str__(self):
        if self.coverage_type() == "table":
            return f"Table: {self.table} - {self.area}"
        if self.coverage_type() == "column":
            return f"Column: {self.column} - {self.area}"
        if self.coverage_type() == "column_original_name":
            return f"Column: {self.column} - {self.area}"
        if self.coverage_type() == "raw_data_source":
            return f"Raw data source: {self.raw_data_source} - {self.area}"
        if self.coverage_type() == "information_request":
            return f"Information request: {self.information_request} - {self.area}"
        if self.coverage_type() == "key":
            return f"Key: {self.key} - {self.area}"
        if self.coverage_type() == "analysis":
            return f"Analysis: {self.analysis} - {self.area}"
        return str(self.id)

    def coverage_type(self):
        """
        Return the type of coverage. Must be table, raw_data_source,
        information_request, column or key
        """
        if self.table:
            return "table"
        if self.column:
            return "column"
        if self.column_original_name:
            return "column_original_name"
        if self.raw_data_source:
            return "raw_data_source"
        if self.information_request:
            return "information_request"
        if self.key:
            return "key"
        if self.analysis:
            return "analysis"
        return ""

    coverage_type.short_description = "Coverage Type"

    def get_similarity_of_area(self, other: "Coverage"):
        if not self.area:
            return 0
        if not other.area:
            return 0
        if self.area.name.startswith(other.area.name):
            return 1
        if other.area.name.startswith(self.area.name):
            return 1
        return 0

    def get_similarity_of_datetime(self, other: "Coverage"):
        for dt_self in self.datetime_ranges.all():
            for dt_other in other.datetime_ranges.all():
                if dt_self.get_similarity_of_datetime(dt_other):
                    return 1
        return 0

    def clean(self) -> None:
        """
        Assert that only one of "table", "raw_data_source",
        "information_request", "column" or "key" is set
        """
        count = 0
        if self.table:
            count += 1
        if self.column:
            count += 1
        if self.column_original_name:
            count += 1
        if self.raw_data_source:
            count += 1
        if self.information_request:
            count += 1
        if self.key:
            count += 1
        if self.analysis:
            count += 1
        if count != 1:
            raise ValidationError(
                "One and only one of 'table', 'raw_data_source', "
                "'information_request', 'column', 'key', 'analysis' must be set."
            )


class License(BaseModel):
    """License model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=True)
    name = models.CharField(max_length=255)
    url = models.URLField()

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.slug)

    class Meta:
        """Meta definition for License."""

        db_table = "license"
        verbose_name = "License"
        verbose_name_plural = "Licenses"
        ordering = ["slug"]


class Key(BaseModel):
    """
    Key model
    Sets a name and a value of a dictionary key
    """

    id = models.UUIDField(primary_key=True, default=uuid4)
    dictionary = models.ForeignKey("Dictionary", on_delete=models.CASCADE, related_name="keys")
    name = models.CharField(max_length=255)
    value = models.CharField(max_length=255)

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.name)

    class Meta:
        """Meta definition for Key."""

        db_table = "keys"
        verbose_name = "Key"
        verbose_name_plural = "Keys"
        ordering = ["name"]


class Pipeline(BaseModel):
    """Pipeline model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    github_url = models.URLField()

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.github_url)

    class Meta:
        """Meta definition for Pipeline."""

        db_table = "pipeline"
        verbose_name = "Pipeline"
        verbose_name_plural = "Pipelines"
        ordering = ["github_url"]


class Analysis(BaseModel):
    """Analysis model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    name = models.CharField(null=True, blank=True, max_length=255)
    description = models.TextField(null=True, blank=True)
    analysis_type = models.ForeignKey(
        "AnalysisType",
        on_delete=models.SET_NULL,
        null=True,
        related_name="analyses",
    )
    datasets = models.ManyToManyField(
        "Dataset",
        related_name="analyses",
        help_text="Datasets used in the analysis",
    )
    themes = models.ManyToManyField(
        "Theme",
        related_name="analyses",
        help_text="Themes are used to group analyses by topic",
    )
    tags = models.ManyToManyField(
        "Tag",
        related_name="analyses",
        blank=True,
        help_text="Tags are used to group analyses by topic",
    )
    authors = models.ManyToManyField(
        Account,
        related_name="analyses",
        blank=True,
        help_text="People who performed and/or wrote the analysis",
    )
    url = models.URLField(blank=True, null=True, max_length=255)

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.name)

    class Meta:
        """Meta definition for Analysis."""

        db_table = "analysis"
        verbose_name = "Analysis"
        verbose_name_plural = "Analyses"
        ordering = ["name"]


class AnalysisType(BaseModel):
    """Analysis Type model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=True)
    name = models.CharField(max_length=255)

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.name)

    class Meta:
        """Meta definition for AnalysisType."""

        db_table = "analysis_type"
        verbose_name = "Analysis Type"
        verbose_name_plural = "Analysis Types"
        ordering = ["name"]


class Tag(BaseModel):
    """Tag model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=True)
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.slug)

    class Meta:
        """Meta definition for Tag."""

        db_table = "tag"
        verbose_name = "Tag"
        verbose_name_plural = "Tags"
        ordering = ["slug"]


class Theme(BaseModel):
    """Theme model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=True)
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.slug)

    class Meta:
        """Meta definition for Theme."""

        db_table = "theme"
        verbose_name = "Theme"
        verbose_name_plural = "Themes"
        ordering = ["slug"]


class Organization(BaseModel):
    """Organization model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=False, max_length=255)
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    area = models.ForeignKey(
        "Area",
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
        related_name="organizations",
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    website = models.URLField(blank=True, null=True, max_length=255)
    twitter = models.URLField(blank=True, null=True)
    facebook = models.URLField(blank=True, null=True)
    linkedin = models.URLField(blank=True, null=True)
    instagram = models.URLField(blank=True, null=True)
    picture = models.ImageField(
        "Imagem",
        null=True,
        blank=True,
        storage=OverwriteStorage(),
        upload_to=upload_to,
        validators=[validate_image],
    )

    graphql_nested_filter_fields_whitelist = ["id"]

    def __str__(self):
        return str(self.slug)

    class Meta:
        """Meta definition for Organization."""

        db_table = "organization"
        verbose_name = "Organization"
        verbose_name_plural = "Organizations"
        ordering = ["slug"]

    @property
    def full_slug(self):
        if self.area:
            return f"{self.area.slug}_{self.slug}"
        return f"{self.slug}"

    @property
    def has_picture(self):
        if self.picture and self.picture.url:
            return True
        return False


class Status(BaseModel):
    """Status model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=True)
    name = models.CharField(max_length=255)

    def __str__(self) -> str:
        return str(self.slug)

    graphql_nested_filter_fields_whitelist = ["id"]

    class Meta:
        """Meta class"""

        db_table = "status"
        verbose_name = "Status"
        verbose_name_plural = "Statuses"
        ordering = ["slug"]


class Dataset(BaseModel):
    """Dataset model"""

    id = models.UUIDField(primary_key=True, default=uuid4)
    slug = models.SlugField(unique=False, max_length=255)
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    organizations = models.ManyToManyField(
        "Organization",
        related_name="datasets",
        verbose_name="Organizations",
        help_text="Organizations associated with this dataset",
    )
    themes = models.ManyToManyField(
        "Theme",
        related_name="datasets",
        help_text="Themes are used to group datasets by topic",
    )
    tags = models.ManyToManyField(
        "Tag",
        related_name="datasets",
        blank=True,
        help_text="Tags are used to group datasets by topic",
    )
    version = models.IntegerField(null=True, blank=True)
    status = models.ForeignKey(
        "Status",
        on_delete=models.PROTECT,
        related_name="datasets",
        null=True,
        blank=True,
        help_text="Status is used to indicate at what stage of "
        "development or publishing the dataset is.",
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    page_views = models.BigIntegerField(
        default=0,
        help_text="Number of page views by Google Analytics",
    )
    usage_guide = models.TextField(
        blank=True, null=True, default="", max_length=255, verbose_name="Guia de Uso"
    )

    graphql_nested_filter_fields_whitelist = ["id", "slug"]

    def __str__(self):
        return str(self.slug)

    class Meta:
        """Meta class"""

        db_table = "dataset"
        verbose_name = "Dataset"
        verbose_name_plural = "Datasets"
        ordering = ["slug"]

    @cached_property
    def get_tables(self):
        return self.tables.all()

    @cached_property
    def get_raw_data_sources(self):
        return self.raw_data_sources.all()

    @cached_property
    def generate_resources(self):
        resources = [
            *self.get_tables,
            *self.get_raw_data_sources,
            *self.information_requests.all(),
        ]

        return resources

    @property
    def full_slug(self):
        if self.organizations.first().area.slug != "unknown":
            return f"{self.organizations.first().area.slug}_{self.slug}"
        return f"{self.slug}"

    @property
    def popularity(self):
        if not self.page_views:
            return 0.0
        if self.page_views < 1:
            return 0.0
        return log10(self.page_views)

    @property
    def temporal_coverage(self) -> dict:
        """Temporal coverage of all related entities"""
        resources = self.generate_resources
        temporal_coverage = get_temporal_coverage(resources)
        if temporal_coverage["start"] and temporal_coverage["end"]:
            return f"{temporal_coverage['start']} - {temporal_coverage['end']}"
        if temporal_coverage["start"]:
            return f"{temporal_coverage['start']}"
        if temporal_coverage["end"]:
            return f"{temporal_coverage['end']}"
        return ""

    @property
    def spatial_coverage(self) -> list[str]:
        """Union spatial coverage of all related resources"""
        resources = self.generate_resources
        return sorted(list(get_spatial_coverage(resources)))

    @property
    def spatial_coverage_name_pt(self) -> list[str]:
        """Union spatial coverage of all related resources"""
        resources = self.generate_resources
        return sorted(list(get_spatial_coverage_name(resources, locale="pt")))

    @property
    def spatial_coverage_name_en(self) -> list[str]:
        """Union spatial coverage of all related resources"""
        resources = self.generate_resources
        return sorted(list(get_spatial_coverage_name(resources, locale="en")))

    @property
    def spatial_coverage_name_es(self) -> list[str]:
        """Union spatial coverage of all related resources"""
        resources = self.gene